{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/admin/Retention.jsx"],"names":["Retention","PureComponent","constructor","arguments","_defineProperty","loading","data","componentDidMount","start_at","end_at","frequency","this","props","api","post","then","res","setState","catch","err","console","error","render","state","content","_jsx","FormattedMessage","id","defaultMessage","className","slice","map","retention","i","date","FormattedNumber","value","reduce","sum","cohort","maximumFractionDigits","average","k","rate","classNames","concat","roundTo10","style","period","FormattedDate","month","day","timeZone","year","dateForCohort","title"],"mappings":"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","file":"js/435-488f89e07b0dcceb5c03.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage, FormattedNumber, FormattedDate } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport api from 'mastodon/api';\nimport { roundTo10 } from 'mastodon/utils/numbers';\n\nconst dateForCohort = cohort => {\n  const timeZone = 'UTC';\n  switch(cohort.frequency) {\n  case 'day':\n    return <FormattedDate value={cohort.period} month='long' day='2-digit' timeZone={timeZone} />;\n  default:\n    return <FormattedDate value={cohort.period} month='long' year='numeric' timeZone={timeZone} />;\n  }\n};\n\nexport default class Retention extends PureComponent {\n\n  static propTypes = {\n    start_at: PropTypes.string,\n    end_at: PropTypes.string,\n    frequency: PropTypes.string,\n  };\n\n  state = {\n    loading: true,\n    data: null,\n  };\n\n  componentDidMount () {\n    const { start_at, end_at, frequency } = this.props;\n\n    api().post('/api/v1/admin/retention', { start_at, end_at, frequency }).then(res => {\n      this.setState({\n        loading: false,\n        data: res.data,\n      });\n    }).catch(err => {\n      console.error(err);\n    });\n  }\n\n  render () {\n    const { loading, data } = this.state;\n    const { frequency } = this.props;\n\n    let content;\n\n    if (loading) {\n      content = <FormattedMessage id='loading_indicator.label' defaultMessage='Loadingâ€¦' />;\n    } else {\n      content = (\n        <table className='retention__table'>\n          <thead>\n            <tr>\n              <th>\n                <div className='retention__table__date retention__table__label'>\n                  <FormattedMessage id='admin.dashboard.retention.cohort' defaultMessage='Sign-up month' />\n                </div>\n              </th>\n\n              <th>\n                <div className='retention__table__number retention__table__label'>\n                  <FormattedMessage id='admin.dashboard.retention.cohort_size' defaultMessage='New users' />\n                </div>\n              </th>\n\n              {data[0].data.slice(1).map((retention, i) => (\n                <th key={retention.date}>\n                  <div className='retention__table__number retention__table__label'>\n                    {i + 1}\n                  </div>\n                </th>\n              ))}\n            </tr>\n\n            <tr>\n              <td>\n                <div className='retention__table__date retention__table__average'>\n                  <FormattedMessage id='admin.dashboard.retention.average' defaultMessage='Average' />\n                </div>\n              </td>\n\n              <td>\n                <div className='retention__table__size'>\n                  <FormattedNumber value={data.reduce((sum, cohort, i) => sum + ((cohort.data[0].value * 1) - sum) / (i + 1), 0)} maximumFractionDigits={0} />\n                </div>\n              </td>\n\n              {data[0].data.slice(1).map((retention, i) => {\n                const average = data.reduce((sum, cohort, k) => cohort.data[i + 1] ? sum + (cohort.data[i + 1].rate - sum)/(k + 1) : sum, 0);\n\n                return (\n                  <td key={retention.date}>\n                    <div className={classNames('retention__table__box', 'retention__table__average', `retention__table__box--${roundTo10(average * 100)}`)}>\n                      <FormattedNumber value={average} style='percent' />\n                    </div>\n                  </td>\n                );\n              })}\n            </tr>\n          </thead>\n\n          <tbody>\n            {data.slice(0, -1).map(cohort => (\n              <tr key={cohort.period}>\n                <td>\n                  <div className='retention__table__date'>\n                    {dateForCohort(cohort)}\n                  </div>\n                </td>\n\n                <td>\n                  <div className='retention__table__size'>\n                    <FormattedNumber value={cohort.data[0].value} />\n                  </div>\n                </td>\n\n                {cohort.data.slice(1).map(retention => (\n                  <td key={retention.date}>\n                    <div className={classNames('retention__table__box', `retention__table__box--${roundTo10(retention.rate * 100)}`)}>\n                      <FormattedNumber value={retention.rate} style='percent' />\n                    </div>\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      );\n    }\n\n    let title = null;\n    switch(frequency) {\n    case 'day':\n      title = <FormattedMessage id='admin.dashboard.daily_retention' defaultMessage='User retention rate by day after sign-up' />;\n      break;\n    default:\n      title = <FormattedMessage id='admin.dashboard.monthly_retention' defaultMessage='User retention rate by month after sign-up' />;\n    }\n\n    return (\n      <div className='retention'>\n        <h4>{title}</h4>\n\n        {content}\n      </div>\n    );\n  }\n\n}\n"],"sourceRoot":""}