{"version":3,"sources":["webpack:///./node_modules/arrow-key-navigation/dist-web/index.js"],"names":["textInputTypes","checkboxRadioInputTypes","focusTrapTest","undefined","focusablesQuery","getActiveElement","activeElement","document","shadowRoot","getNextNode","root","targetElement","forwardDirection","filter","acceptNode","node","element","matches","disabled","test","getAttribute","hasAttribute","offsetWidth","offsetHeight","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","nextNode","ShadowRoot","toString","includes","nodes","Array","prototype","slice","call","querySelectorAll","idx","indexOf","length","reverse","i","HTMLElement","getNextCandidateNodeForShadowDomPolyfill","walker","createTreeWalker","SHOW_ELEMENT","currentNode","previousNode","lastChild","getNextCandidateNode","host","getRootNode","focusNextOrPrevious","event","key","selectionStart","selectionEnd","len","tagName","isTextarea","isTextInput","toLowerCase","isContentEditable","selection","getSelection","anchorOffset","focusOffset","textContent","value","shouldIgnoreEvent","parent","parentElement","getFocusTrapParent","focus","preventDefault","keyListener","altKey","metaKey","ctrlKey","click","handleEnter","register","addEventListener","unregister","removeEventListener","setFocusTrapTest"],"mappings":"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","file":"js/arrow-key-navigation-2440f7d29ea954af4d2c.chunk.js","sourcesContent":["/**\n * Makes it so the left and right arrows change focus, ala Tab/Shift+Tab. This is mostly designed\n * for KaiOS devices.\n */\n/* global document, addEventListener, removeEventListener, getSelection */\n// TODO: email/number types are a special type, in that they return selectionStart/selectionEnd as null\n// As far as I can tell, there is no way to actually get the caret position from these inputs. So we\n// don't do the proper caret handling for those inputs, unfortunately.\n// https://html.spec.whatwg.org/multipage/input.html#do-not-apply\nvar textInputTypes = ['text', 'search', 'url', 'password', 'tel'];\nvar checkboxRadioInputTypes = ['checkbox', 'radio'];\nvar focusTrapTest = undefined;\n// This query is adapted from a11y-dialog\n// https://github.com/edenspiekermann/a11y-dialog/blob/cf4ed81/a11y-dialog.js#L6-L18\nvar focusablesQuery = 'a[href], area[href], input, select, textarea, ' +\n    'button, iframe, object, embed, [contenteditable], [tabindex], ' +\n    'video[controls], audio[controls], summary';\nfunction getActiveElement() {\n    var activeElement = document.activeElement;\n    while (activeElement.shadowRoot) {\n        activeElement = activeElement.shadowRoot.activeElement;\n    }\n    return activeElement;\n}\nfunction isFocusable(element) {\n    return element.matches(focusablesQuery) &&\n        !element.disabled &&\n        !/^-/.test(element.getAttribute('tabindex') || '') &&\n        !element.hasAttribute('inert') && // see https://github.com/GoogleChrome/inert-polyfill\n        (element.offsetWidth > 0 || element.offsetHeight > 0);\n}\nfunction getFocusTrapParent(element) {\n    if (!focusTrapTest) {\n        return;\n    }\n    var parent = element.parentElement;\n    while (parent) {\n        if (focusTrapTest(parent)) {\n            return parent;\n        }\n        parent = parent.parentElement;\n    }\n}\nfunction shouldIgnoreEvent(activeElement, forwardDirection) {\n    var tagName = activeElement.tagName;\n    var isTextarea = tagName === 'TEXTAREA';\n    var isTextInput = tagName === 'INPUT' &&\n        textInputTypes.indexOf(activeElement.getAttribute('type').toLowerCase()) !== -1;\n    var isContentEditable = activeElement.hasAttribute('contenteditable');\n    if (!isTextarea && !isTextInput && !isContentEditable) {\n        return false;\n    }\n    var selectionStart;\n    var selectionEnd;\n    var len;\n    if (isContentEditable) {\n        var selection = getSelection();\n        selectionStart = selection.anchorOffset;\n        selectionEnd = selection.focusOffset;\n        len = activeElement.textContent.length;\n    }\n    else {\n        selectionStart = activeElement.selectionStart;\n        selectionEnd = activeElement.selectionEnd;\n        len = activeElement.value.length;\n    }\n    // if the cursor is inside of a textarea/input, then don't focus to the next/previous element\n    // unless the cursor is at the beginning or the end\n    if (!forwardDirection && selectionStart === selectionEnd && selectionStart === 0) {\n        return false;\n    }\n    else if (forwardDirection && selectionStart === selectionEnd && selectionStart === len) {\n        return false;\n    }\n    return true;\n}\nfunction getNextCandidateNodeForShadowDomPolyfill(root, targetElement, forwardDirection, filter) {\n    // When the shadydom polyfill is running, we can't use TreeWalker on ShadowRoots because\n    // they aren't real Nodes. So we do this workaround where we run TreeWalker on the\n    // children instead.\n    var nodes = Array.prototype.slice.call(root.querySelectorAll('*'));\n    var idx = nodes.indexOf(targetElement);\n    if (forwardDirection) {\n        nodes = nodes.slice(idx + 1);\n    }\n    else {\n        if (idx === -1) {\n            idx = nodes.length;\n        }\n        nodes = nodes.slice(0, idx);\n        nodes.reverse();\n    }\n    for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (node instanceof HTMLElement && filter.acceptNode(node) === NodeFilter.FILTER_ACCEPT) {\n            return node;\n        }\n    }\n    return undefined;\n}\nfunction getNextCandidateNode(root, targetElement, forwardDirection, filter) {\n    var walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, filter);\n    if (targetElement) {\n        walker.currentNode = targetElement;\n    }\n    if (forwardDirection) {\n        return walker.nextNode();\n    }\n    else if (targetElement) {\n        return walker.previousNode();\n    }\n    // iterating backwards through shadow root, use last child\n    return walker.lastChild();\n}\nfunction isShadowDomPolyfill() {\n    return typeof ShadowRoot !== 'undefined' &&\n        // ShadowRoot.polyfill is just a hack for our unit tests\n        ('polyfill' in ShadowRoot || !ShadowRoot.toString().includes('[native code]'));\n}\nfunction getNextNode(root, targetElement, forwardDirection) {\n    var filter = {\n        acceptNode: function (node) {\n            return (node === targetElement || node.shadowRoot || isFocusable(node))\n                ? NodeFilter.FILTER_ACCEPT\n                : NodeFilter.FILTER_SKIP;\n        }\n    };\n    // TODO: remove this when we don't need to support the Shadow DOM polyfill\n    var nextNode = isShadowDomPolyfill() && root instanceof ShadowRoot\n        ? getNextCandidateNodeForShadowDomPolyfill(root, targetElement, forwardDirection, filter)\n        : getNextCandidateNode(root, targetElement, forwardDirection, filter);\n    if (nextNode && nextNode.shadowRoot) { // push into the shadow DOM\n        return getNextNode(nextNode.shadowRoot, null, forwardDirection);\n    }\n    if (!nextNode && root.host) { // pop out of the shadow DOM\n        return getNextNode(root.host.getRootNode(), root.host, forwardDirection);\n    }\n    return nextNode;\n}\nfunction focusNextOrPrevious(event, key) {\n    var activeElement = getActiveElement();\n    var forwardDirection = key === 'ArrowRight';\n    if (shouldIgnoreEvent(activeElement, forwardDirection)) {\n        return;\n    }\n    var root = getFocusTrapParent(activeElement) || activeElement.getRootNode();\n    var nextNode = getNextNode(root, activeElement, forwardDirection);\n    if (nextNode && nextNode !== activeElement) {\n        nextNode.focus();\n        event.preventDefault();\n    }\n}\nfunction handleEnter(event) {\n    var activeElement = getActiveElement();\n    if (activeElement.tagName === 'INPUT' &&\n        checkboxRadioInputTypes.indexOf(activeElement.getAttribute('type').toLowerCase()) !== -1) {\n        // Explicitly override \"enter\" on an input and make it fire the checkbox/radio\n        activeElement.click();\n        event.preventDefault();\n    }\n}\nfunction keyListener(event) {\n    if (event.altKey || event.metaKey || event.ctrlKey) {\n        return; // ignore e.g. Alt-Left and Ctrl-Right, which are used to switch browser tabs or navigate back/forward\n    }\n    var key = event.key;\n    switch (key) {\n        case 'ArrowLeft':\n        case 'ArrowRight': {\n            focusNextOrPrevious(event, key);\n            break;\n        }\n        case 'Enter': {\n            handleEnter(event);\n            break;\n        }\n    }\n}\n/**\n * Start listening for keyboard events. Attaches a listener to the window.\n */\nfunction register() {\n    addEventListener('keydown', keyListener);\n}\n/**\n * Stop listening for keyboard events. Unattaches a listener to the window.\n */\nfunction unregister() {\n    removeEventListener('keydown', keyListener);\n}\n/**\n * Set a focus trap test to identify any focus traps in the DOM, i.e. a top-level DOM node that indicates the root\n * of a focus trap. Once this is set, if focus changes within the focus trap, then will not leave the focus trap.\n * @param test: the test function\n * @see https://w3c.github.io/aria-practices/examples/dialog-modal/dialog.html\n */\nfunction setFocusTrapTest(test) {\n    focusTrapTest = test;\n}\n\nexport { register, setFocusTrapTest, unregister };\n//# sourceMappingURL=index.js.map\n"],"sourceRoot":""}