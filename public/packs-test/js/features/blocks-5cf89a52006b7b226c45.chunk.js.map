{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/blocks/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","Blocks","ImmutablePureComponent","constructor","arguments","_defineProperty","_debounce","this","props","dispatch","expandBlocks","leading","UNSAFE_componentWillMount","fetchBlocks","render","intl","accountIds","hasMore","multiColumn","isLoading","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","bindToDocument","icon","iconComponent","BlockIcon","formatMessage","alwaysShowBackButton","ScrollableList","scrollKey","onLoadMore","handleLoadMore","map","AccountContainer","defaultAction","params","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","connect","state","getIn","injectIntl"],"mappings":"8QAkBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,gBAAkBC,eAAe,mBASjD,MAAMC,UAAeC,IAAuBC,cAAA,SAAAC,WAAAC,YAAA,sBAgBzBC,KAAS,KACxBC,KAAKC,MAAMC,SAASC,cAAe,GAClC,IAAK,CAAEC,SAAS,IAAO,CAN1BC,4BACEL,KAAKC,MAAMC,SAASI,cACtB,CAMAC,SACE,MAAM,KAAEC,EAAI,WAAEC,EAAU,QAAEC,EAAO,YAAEC,EAAW,UAAEC,GAAcZ,KAAKC,MAEnE,IAAKQ,EACH,OACEI,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAACzB,GAAE,sBAAuBC,eAAe,uCAE/E,OACEoB,YAACC,IAAM,CAACI,gBAAiBP,EAAaQ,KAAK,MAAMC,cAAeC,IAAW9B,QAASiB,EAAKc,cAAcjC,EAASE,SAAUgC,sBAAoB,UAC5IV,YAACW,IAAc,CACbC,UAAU,SACVC,WAAY1B,KAAK2B,eACjBjB,QAASA,EACTE,UAAWA,EACXI,aAAcA,EACdE,gBAAiBP,QAAY,EAE5BF,EAAWmB,KAAIpC,GACdqB,YAACgB,IAAgB,CAAUrC,GAAIA,EAAIsC,cAAc,SAA1BtC,MAKjC,EAEDM,YAnDKJ,EAAM,YAES,CACjBqC,OAAQC,IAAUC,OAAOC,WACzBhC,SAAU8B,IAAUG,KAAKD,WACzBzB,WAAY2B,IAAmBC,KAC/B3B,QAASsB,IAAUM,KACnB1B,UAAWoB,IAAUM,KACrB9B,KAAMwB,IAAUC,OAAOC,WACvBvB,YAAaqB,IAAUM,OA4CZC,6BA3DSC,IAAK,CAC3B/B,WAAY+B,EAAMC,MAAM,CAAC,aAAc,SAAU,UACjD/B,UAAW8B,EAAMC,MAAM,CAAC,aAAc,SAAU,SAChD7B,UAAW4B,EAAMC,MAAM,CAAC,aAAc,SAAU,cAAc,MAwDjDF,CAAyBG,YAAWhD,G","file":"js/features/blocks-5cf89a52006b7b226c45.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport BlockIcon from '@/material-icons/400-24px/block-fill.svg?react';\n\nimport { fetchBlocks, expandBlocks } from '../../actions/blocks';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport AccountContainer from '../../containers/account_container';\nimport Column from '../ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.blocks', defaultMessage: 'Blocked users' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['user_lists', 'blocks', 'next']),\n  isLoading: state.getIn(['user_lists', 'blocks', 'isLoading'], true),\n});\n\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, multiColumn, isLoading } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.blocks' defaultMessage=\"You haven't blocked any users yet.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='ban' iconComponent={BlockIcon} heading={intl.formatMessage(messages.heading)} alwaysShowBackButton>\n        <ScrollableList\n          scrollKey='blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} defaultAction='block' />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Blocks));\n"],"sourceRoot":""}