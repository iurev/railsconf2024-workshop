{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/explore/components/story.jsx","webpack:///./app/javascript/mastodon/features/explore/links.jsx","webpack:///./app/javascript/mastodon/features/explore/results.jsx","webpack:///./app/javascript/mastodon/features/explore/statuses.jsx","webpack:///./app/javascript/mastodon/features/explore/suggestions.jsx","webpack:///./app/javascript/mastodon/features/explore/tags.jsx","webpack:///./app/javascript/mastodon/features/explore/index.jsx"],"names":["Story","PureComponent","constructor","arguments","_defineProperty","thumbnailLoaded","this","setState","render","expanded","url","title","lang","publisher","author","publishedAt","sharedTimes","thumbnail","thumbnailDescription","blurhash","props","state","_jsx","className","classNames","href","target","rel","Skeleton","width","_jsxs","_Fragment","children","RelativeTimestamp","timestamp","FormattedMessage","id","defaultMessage","values","name","ShortNumber","value","renderer","accountsCountRenderer","Blurhash","hash","src","onLoad","handleImageLoad","alt","Links","componentDidMount","dispatch","links","history","action","size","fetchTrendingLinks","isLoading","banner","DismissableBanner","isEmpty","LoadingIndicator","map","link","i","get","getIn","connect","withRouter","messages","defineMessages","hidePeek","list","skipLast","Results","type","submittedType","submitSearch","_loadMore","getDerivedStateFromProps","expandSearch","intl","q","results","hasMore","ImmutableList","filteredResults","accounts","hashtags","statuses","SearchSection","Icon","icon","PeopleIcon","onClickMore","handleLoadMoreAccounts","take","Account","TagIcon","handleLoadMoreHashtags","hashtag","Hashtag","FindInPageIcon","handleLoadMoreStatuses","Status","renderAccounts","renderHashtags","renderStatuses","onClick","handleSelectAll","undefined","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","ScrollableList","scrollKey","onLoadMore","handleLoadMore","emptyMessage","bindToDocument","Helmet","formatMessage","injectIntl","Statuses","_debounce","expandTrendingStatuses","leading","statusIds","fetchTrendingStatuses","multiColumn","StatusList","trackScroll","prepend","alwaysPrepend","timelineId","withCounters","getStatusList","Suggestions","suggestions","fetchSuggestions","suggestion","AccountCard","Tags","fetchTrendingHashtags","isLoadingHashtags","searchResults","Explore","column","scrollTop","c","isSearching","signedIn","context","identity","Column","ref","setRef","label","ColumnHeader","iconComponent","SearchIcon","ExploreIcon","handleHeaderClick","Search","SearchResults","NavLink","exact","to","tagName","Switch","Route","path","component","content","PropTypes","object","layout","trendsEnabled"],"mappings":"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","file":"js/features/explore-b32bbbdf94ca2916b09e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { Blurhash } from 'mastodon/components/blurhash';\nimport { accountsCountRenderer } from 'mastodon/components/hashtag';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { Skeleton } from 'mastodon/components/skeleton';\n\nexport default class Story extends PureComponent {\n\n  static propTypes = {\n    url: PropTypes.string,\n    title: PropTypes.string,\n    lang: PropTypes.string,\n    publisher: PropTypes.string,\n    publishedAt: PropTypes.string,\n    author: PropTypes.string,\n    sharedTimes: PropTypes.number,\n    thumbnail: PropTypes.string,\n    thumbnailDescription: PropTypes.string,\n    blurhash: PropTypes.string,\n    expanded: PropTypes.bool,\n  };\n\n  state = {\n    thumbnailLoaded: false,\n  };\n\n  handleImageLoad = () => this.setState({ thumbnailLoaded: true });\n\n  render () {\n    const { expanded, url, title, lang, publisher, author, publishedAt, sharedTimes, thumbnail, thumbnailDescription, blurhash } = this.props;\n\n    const { thumbnailLoaded } = this.state;\n\n    return (\n      <a className={classNames('story', { expanded })} href={url} target='blank' rel='noopener'>\n        <div className='story__details'>\n          <div className='story__details__publisher'>{publisher ? <span lang={lang}>{publisher}</span> : <Skeleton width={50} />}{publishedAt && <> · <RelativeTimestamp timestamp={publishedAt} /></>}</div>\n          <div className='story__details__title' lang={lang}>{title ? title : <Skeleton />}</div>\n          <div className='story__details__shared'>{author && <><FormattedMessage id='link_preview.author' defaultMessage='By {name}' values={{ name: <strong>{author}</strong> }} /> · </>}{typeof sharedTimes === 'number' ? <ShortNumber value={sharedTimes} renderer={accountsCountRenderer} /> : <Skeleton width={100} />}</div>\n        </div>\n\n        <div className='story__thumbnail'>\n          {thumbnail ? (\n            <>\n              <div className={classNames('story__thumbnail__preview', { 'story__thumbnail__preview--hidden': thumbnailLoaded })}><Blurhash hash={blurhash} /></div>\n              <img src={thumbnail} onLoad={this.handleImageLoad} alt={thumbnailDescription} title={thumbnailDescription} lang={lang} />\n            </>\n          ) : <Skeleton />}\n        </div>\n      </a>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingLinks } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nimport Story from './components/story';\n\nconst mapStateToProps = state => ({\n  links: state.getIn(['trends', 'links', 'items']),\n  isLoading: state.getIn(['trends', 'links', 'isLoading']),\n});\n\nclass Links extends PureComponent {\n\n  static propTypes = {\n    links: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, links, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && links.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingLinks());\n  }\n\n  render () {\n    const { isLoading, links } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/links'>\n        <FormattedMessage id='dismissable_banner.explore_links' defaultMessage='These are news stories being shared the most on the social web today. Newer news stories posted by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && links.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__links scrollable' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : links.map((link, i) => (\n          <Story\n            key={link.get('id')}\n            expanded={i === 0}\n            lang={link.get('language')}\n            url={link.get('url')}\n            title={link.get('title')}\n            publisher={link.get('provider_name')}\n            publishedAt={link.get('published_at')}\n            author={link.get('author_name')}\n            sharedTimes={link.getIn(['history', 0, 'accounts']) * 1 + link.getIn(['history', 1, 'accounts']) * 1}\n            thumbnail={link.get('image')}\n            thumbnailDescription={link.get('image_description')}\n            blurhash={link.get('blurhash')}\n          />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Links));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport FindInPageIcon from '@/material-icons/400-24px/find_in_page.svg?react';\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport TagIcon from '@/material-icons/400-24px/tag.svg?react';\nimport { submitSearch, expandSearch } from 'mastodon/actions/search';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { Icon } from 'mastodon/components/icon';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport Account from 'mastodon/containers/account_container';\nimport Status from 'mastodon/containers/status_container';\n\nimport { SearchSection } from './components/search_section';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for {q}' },\n});\n\nconst mapStateToProps = state => ({\n  isLoading: state.getIn(['search', 'isLoading']),\n  results: state.getIn(['search', 'results']),\n  q: state.getIn(['search', 'searchTerm']),\n  submittedType: state.getIn(['search', 'type']),\n});\n\nconst INITIAL_PAGE_LIMIT = 10;\nconst INITIAL_DISPLAY = 4;\n\nconst hidePeek = list => {\n  if (list.size > INITIAL_PAGE_LIMIT && list.size % INITIAL_PAGE_LIMIT === 1) {\n    return list.skipLast(1);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = accounts => hidePeek(accounts).map(id => (\n  <Account key={id} id={id} />\n));\n\nconst renderHashtags = hashtags => hidePeek(hashtags).map(hashtag => (\n  <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n));\n\nconst renderStatuses = statuses => hidePeek(statuses).map(id => (\n  <Status key={id} id={id} />\n));\n\nclass Results extends PureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.contains({\n      accounts: ImmutablePropTypes.orderedSet,\n      statuses: ImmutablePropTypes.orderedSet,\n      hashtags: ImmutablePropTypes.orderedSet,\n    }),\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    q: PropTypes.string,\n    intl: PropTypes.object,\n    submittedType: PropTypes.oneOf(['accounts', 'statuses', 'hashtags']),\n  };\n\n  state = {\n    type: this.props.submittedType || 'all',\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.submittedType !== state.type) {\n      return {\n        type: props.submittedType || 'all',\n      };\n    }\n\n    return null;\n  }\n\n  handleSelectAll = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for a specific type, we need to resubmit\n    // the query to get all types of results\n    if (submittedType) {\n      dispatch(submitSearch());\n    }\n\n    this.setState({ type: 'all' });\n  };\n\n  handleSelectAccounts = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'accounts') {\n      dispatch(submitSearch('accounts'));\n    }\n\n    this.setState({ type: 'accounts' });\n  };\n\n  handleSelectHashtags = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'hashtags') {\n      dispatch(submitSearch('hashtags'));\n    }\n\n    this.setState({ type: 'hashtags' });\n  };\n\n  handleSelectStatuses = () => {\n    const { submittedType, dispatch } = this.props;\n\n    // If we originally searched for something else (but not everything),\n    // we need to resubmit the query for this specific type\n    if (submittedType !== 'statuses') {\n      dispatch(submitSearch('statuses'));\n    }\n\n    this.setState({ type: 'statuses' });\n  };\n\n  handleLoadMoreAccounts = () => this._loadMore('accounts');\n  handleLoadMoreStatuses = () => this._loadMore('statuses');\n  handleLoadMoreHashtags = () => this._loadMore('hashtags');\n\n  _loadMore (type) {\n    const { dispatch } = this.props;\n    dispatch(expandSearch(type));\n  }\n\n  handleLoadMore = () => {\n    const { type } = this.state;\n\n    if (type !== 'all') {\n      this._loadMore(type);\n    }\n  };\n\n  render () {\n    const { intl, isLoading, q, results } = this.props;\n    const { type } = this.state;\n\n    // We request 1 more result than we display so we can tell if there'd be a next page\n    const hasMore = type !== 'all' ? results.get(type, ImmutableList()).size > INITIAL_PAGE_LIMIT && results.get(type).size % INITIAL_PAGE_LIMIT === 1 : false;\n\n    let filteredResults;\n\n    const accounts = results.get('accounts', ImmutableList());\n    const hashtags = results.get('hashtags', ImmutableList());\n    const statuses = results.get('statuses', ImmutableList());\n\n    switch(type) {\n    case 'all':\n      filteredResults = (accounts.size + hashtags.size + statuses.size) > 0 ? (\n        <>\n          {accounts.size > 0 && (\n            <SearchSection key='accounts' title={<><Icon id='users' icon={PeopleIcon} /><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></>} onClickMore={this.handleLoadMoreAccounts}>\n              {accounts.take(INITIAL_DISPLAY).map(id => <Account key={id} id={id} />)}\n            </SearchSection>\n          )}\n\n          {hashtags.size > 0 && (\n            <SearchSection key='hashtags' title={<><Icon id='hashtag' icon={TagIcon} /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></>} onClickMore={this.handleLoadMoreHashtags}>\n              {hashtags.take(INITIAL_DISPLAY).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n            </SearchSection>\n          )}\n\n          {statuses.size > 0 && (\n            <SearchSection key='statuses' title={<><Icon id='quote-right' icon={FindInPageIcon} /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></>} onClickMore={this.handleLoadMoreStatuses}>\n              {statuses.take(INITIAL_DISPLAY).map(id => <Status key={id} id={id} />)}\n            </SearchSection>\n          )}\n        </>\n      ) : [];\n      break;\n    case 'accounts':\n      filteredResults = renderAccounts(accounts);\n      break;\n    case 'hashtags':\n      filteredResults = renderHashtags(hashtags);\n      break;\n    case 'statuses':\n      filteredResults = renderStatuses(statuses);\n      break;\n    }\n\n    return (\n      <>\n        <div className='account__section-headline'>\n          <button onClick={this.handleSelectAll} className={type === 'all' ? 'active' : undefined}><FormattedMessage id='search_results.all' defaultMessage='All' /></button>\n          <button onClick={this.handleSelectAccounts} className={type === 'accounts' ? 'active' : undefined}><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></button>\n          <button onClick={this.handleSelectHashtags} className={type === 'hashtags' ? 'active' : undefined}><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></button>\n          <button onClick={this.handleSelectStatuses} className={type === 'statuses' ? 'active' : undefined}><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></button>\n        </div>\n\n        <div className='explore__search-results' data-nosnippet>\n          <ScrollableList\n            scrollKey='search-results'\n            isLoading={isLoading}\n            onLoadMore={this.handleLoadMore}\n            hasMore={hasMore}\n            emptyMessage={<FormattedMessage id='search_results.nothing_found' defaultMessage='Could not find anything for these search terms' />}\n            bindToDocument\n          >\n            {filteredResults}\n          </ScrollableList>\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title, { q })}</title>\n        </Helmet>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Results));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\n\nimport { fetchTrendingStatuses, expandTrendingStatuses } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport StatusList from 'mastodon/components/status_list';\nimport { getStatusList } from 'mastodon/selectors';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  statusIds: getStatusList(state, 'trending'),\n  isLoading: state.getIn(['status_lists', 'trending', 'isLoading'], true),\n  hasMore: !!state.getIn(['status_lists', 'trending', 'next']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, statusIds, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && statusIds.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingStatuses());\n  }\n\n  handleLoadMore = debounce(() => {\n    const { dispatch } = this.props;\n    dispatch(expandTrendingStatuses());\n  }, 300, { leading: true });\n\n  render () {\n    const { isLoading, hasMore, statusIds, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />;\n\n    return (\n      <StatusList\n        trackScroll\n        prepend={<DismissableBanner id='explore/statuses'><FormattedMessage id='dismissable_banner.explore_statuses' defaultMessage='These are posts from across the social web that are gaining traction today. Newer posts with more boosts and favorites are ranked higher.' /></DismissableBanner>}\n        alwaysPrepend\n        timelineId='explore'\n        statusIds={statusIds}\n        scrollKey='explore-statuses'\n        hasMore={hasMore}\n        isLoading={isLoading}\n        onLoadMore={this.handleLoadMore}\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n        withCounters\n      />\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Statuses));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchSuggestions } from 'mastodon/actions/suggestions';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport AccountCard from 'mastodon/features/directory/components/account_card';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nclass Suggestions extends PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    suggestions: ImmutablePropTypes.list,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions, history } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && suggestions.size > 0) {\n      return;\n    }\n\n    dispatch(fetchSuggestions(true));\n  }\n\n  render () {\n    const { isLoading, suggestions } = this.props;\n\n    if (!isLoading && suggestions.isEmpty()) {\n      return (\n        <div className='explore__suggestions scrollable scrollable--flex'>\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='explore__suggestions scrollable' data-nosnippet>\n        {isLoading ? <LoadingIndicator /> : suggestions.map(suggestion => (\n          <AccountCard key={suggestion.get('account')} id={suggestion.get('account')} />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Suggestions));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['trends', 'tags', 'items']),\n  isLoadingHashtags: state.getIn(['trends', 'tags', 'isLoading']),\n});\n\nclass Tags extends PureComponent {\n\n  static propTypes = {\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    dispatch: PropTypes.func.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  componentDidMount () {\n    const { dispatch, history, hashtags } = this.props;\n\n    // If we're navigating back to the screen, do not trigger a reload\n    if (history.action === 'POP' && hashtags.size > 0) {\n      return;\n    }\n\n    dispatch(fetchTrendingHashtags());\n  }\n\n  render () {\n    const { isLoading, hashtags } = this.props;\n\n    const banner = (\n      <DismissableBanner id='explore/tags'>\n        <FormattedMessage id='dismissable_banner.explore_tags' defaultMessage='These are hashtags that are gaining traction on the social web today. Hashtags that are used by more different people are ranked higher.' />\n      </DismissableBanner>\n    );\n\n    if (!isLoading && hashtags.isEmpty()) {\n      return (\n        <div className='explore__links scrollable scrollable--flex'>\n          {banner}\n\n          <div className='empty-column-indicator'>\n            <FormattedMessage id='empty_column.explore_statuses' defaultMessage='Nothing is trending right now. Check back later!' />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className='scrollable explore__links' data-nosnippet>\n        {banner}\n\n        {isLoading ? (<LoadingIndicator />) : hashtags.map(hashtag => (\n          <Hashtag key={hashtag.get('name')} hashtag={hashtag} />\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withRouter(Tags));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink, Switch, Route } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\n\nimport ExploreIcon from '@/material-icons/400-24px/explore.svg?react';\nimport SearchIcon from '@/material-icons/400-24px/search.svg?react';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport Search from 'mastodon/features/compose/containers/search_container';\nimport { trendsEnabled } from 'mastodon/initial_state';\n\nimport Links from './links';\nimport SearchResults from './results';\nimport Statuses from './statuses';\nimport Suggestions from './suggestions';\nimport Tags from './tags';\n\nconst messages = defineMessages({\n  title: { id: 'explore.title', defaultMessage: 'Explore' },\n  searchResults: { id: 'explore.search_results', defaultMessage: 'Search results' },\n});\n\nconst mapStateToProps = state => ({\n  layout: state.getIn(['meta', 'layout']),\n  isSearching: state.getIn(['search', 'submitted']) || !trendsEnabled,\n});\n\nclass Explore extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    isSearching: PropTypes.bool,\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render() {\n    const { intl, multiColumn, isSearching } = this.props;\n    const { signedIn } = this.context.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon={isSearching ? 'search' : 'explore'}\n          iconComponent={isSearching ? SearchIcon : ExploreIcon}\n          title={intl.formatMessage(isSearching ? messages.searchResults : messages.title)}\n          onClick={this.handleHeaderClick}\n          multiColumn={multiColumn}\n        />\n\n        <div className='explore__search-header'>\n          <Search />\n        </div>\n\n        {isSearching ? (\n          <SearchResults />\n        ) : (\n          <>\n            <div className='account__section-headline'>\n              <NavLink exact to='/explore'>\n                <FormattedMessage tagName='div' id='explore.trending_statuses' defaultMessage='Posts' />\n              </NavLink>\n\n              <NavLink exact to='/explore/tags'>\n                <FormattedMessage tagName='div' id='explore.trending_tags' defaultMessage='Hashtags' />\n              </NavLink>\n\n              {signedIn && (\n                <NavLink exact to='/explore/suggestions'>\n                  <FormattedMessage tagName='div' id='explore.suggested_follows' defaultMessage='People' />\n                </NavLink>\n              )}\n\n              <NavLink exact to='/explore/links'>\n                <FormattedMessage tagName='div' id='explore.trending_links' defaultMessage='News' />\n              </NavLink>\n            </div>\n\n            <Switch>\n              <Route path='/explore/tags' component={Tags} />\n              <Route path='/explore/links' component={Links} />\n              <Route path='/explore/suggestions' component={Suggestions} />\n              <Route exact path={['/explore', '/explore/posts', '/search']}>\n                <Statuses multiColumn={multiColumn} />\n              </Route>\n            </Switch>\n\n            <Helmet>\n              <title>{intl.formatMessage(messages.title)}</title>\n              <meta name='robots' content={isSearching ? 'noindex' : 'all'} />\n            </Helmet>\n          </>\n        )}\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Explore));\n"],"sourceRoot":""}