{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_adder/components/account.jsx","webpack:///./app/javascript/mastodon/features/list_adder/components/list.jsx","webpack:///./app/javascript/mastodon/features/list_adder/index.jsx"],"names":["Account","ImmutablePureComponent","render","account","this","props","_jsx","className","Avatar","size","DisplayName","_defineProperty","ImmutablePropTypes","record","isRequired","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","_ref","accountId","injectIntl","messages","defineMessages","remove","id","defaultMessage","add","List","list","intl","onRemove","onAdd","added","button","IconButton","icon","iconComponent","CloseIcon","title","formatMessage","onClick","AddIcon","Icon","ListAltIcon","get","map","PropTypes","object","func","bool","MapStateToProps","listId","getIn","includes","mapDispatchToProps","dispatch","_ref2","removeFromListAdder","addToListAdder","getOrderedLists","createSelector","lists","toList","filter","item","sort","a","b","localeCompare","ListAdder","componentDidMount","onInitialize","componentWillUnmount","onReset","listIds","NewListForm","ListId","string","onClose","setupListAdder","resetListAdder"],"mappings":"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","file":"js/features/list_adder-35199b28aa7782810041.chunk.js","sourcesContent":["import { injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { Avatar } from '../../../components/avatar';\nimport { DisplayName } from '../../../components/display_name';\nimport { makeGetAccount } from '../../../selectors';\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.record.isRequired,\n  };\n\n  render () {\n    const { account } = this.props;\n    return (\n      <div className='account'>\n        <div className='account__wrapper'>\n          <div className='account__display-name'>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n            <DisplayName account={account} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps)(injectIntl(Account));\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport AddIcon from '@/material-icons/400-24px/add.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport { Icon }  from 'mastodon/components/icon';\n\nimport { removeFromListAdder, addToListAdder } from '../../../actions/lists';\nimport { IconButton }  from '../../../components/icon_button';\n\nconst messages = defineMessages({\n  remove: { id: 'lists.account.remove', defaultMessage: 'Remove from list' },\n  add: { id: 'lists.account.add', defaultMessage: 'Add to list' },\n});\n\nconst MapStateToProps = (state, { listId, added }) => ({\n  list: state.get('lists').get(listId),\n  added: typeof added === 'undefined' ? state.getIn(['listAdder', 'lists', 'items']).includes(listId) : added,\n});\n\nconst mapDispatchToProps = (dispatch, { listId }) => ({\n  onRemove: () => dispatch(removeFromListAdder(listId)),\n  onAdd: () => dispatch(addToListAdder(listId)),\n});\n\nclass List extends ImmutablePureComponent {\n\n  static propTypes = {\n    list: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    onRemove: PropTypes.func.isRequired,\n    onAdd: PropTypes.func.isRequired,\n    added: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    added: false,\n  };\n\n  render () {\n    const { list, intl, onRemove, onAdd, added } = this.props;\n\n    let button;\n\n    if (added) {\n      button = <IconButton icon='times' iconComponent={CloseIcon} title={intl.formatMessage(messages.remove)} onClick={onRemove} />;\n    } else {\n      button = <IconButton icon='plus' iconComponent={AddIcon} title={intl.formatMessage(messages.add)} onClick={onAdd} />;\n    }\n\n    return (\n      <div className='list'>\n        <div className='list__wrapper'>\n          <div className='list__display-name'>\n            <Icon id='list-ul' icon={ListAltIcon} className='column-link__icon' />\n            {list.get('title')}\n          </div>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(MapStateToProps, mapDispatchToProps)(injectIntl(List));\n","import PropTypes from 'prop-types';\n\nimport { injectIntl } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { setupListAdder, resetListAdder } from '../../actions/lists';\nimport NewListForm from '../lists/components/new_list_form';\n\nimport Account from './components/account';\nimport List from './components/list';\n// hack\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  listIds: getOrderedLists(state).map(list=>list.get('id')),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onInitialize: accountId => dispatch(setupListAdder(accountId)),\n  onReset: () => dispatch(resetListAdder()),\n});\n\nclass ListAdder extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    onInitialize: PropTypes.func.isRequired,\n    onReset: PropTypes.func.isRequired,\n    listIds: ImmutablePropTypes.list.isRequired,\n  };\n\n  componentDidMount () {\n    const { onInitialize, accountId } = this.props;\n    onInitialize(accountId);\n  }\n\n  componentWillUnmount () {\n    const { onReset } = this.props;\n    onReset();\n  }\n\n  render () {\n    const { accountId, listIds } = this.props;\n\n    return (\n      <div className='modal-root__modal list-adder'>\n        <div className='list-adder__account'>\n          <Account accountId={accountId} />\n        </div>\n\n        <NewListForm />\n\n\n        <div className='list-adder__lists'>\n          {listIds.map(ListId => <List key={ListId} listId={ListId} />)}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ListAdder));\n"],"sourceRoot":""}