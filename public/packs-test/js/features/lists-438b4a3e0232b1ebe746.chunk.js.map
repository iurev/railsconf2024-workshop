{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/lists/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","subheading","getOrderedLists","createSelector","state","get","lists","toList","filter","item","sort","a","b","localeCompare","Lists","ImmutablePureComponent","UNSAFE_componentWillMount","this","props","dispatch","fetchLists","render","intl","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","bindToDocument","label","formatMessage","ColumnHeader","title","icon","iconComponent","ListAltIcon","NewListForm","ScrollableList","scrollKey","prepend","ColumnSubheading","text","map","list","ColumnLink","to","concat","Helmet","name","content","_defineProperty","params","PropTypes","object","isRequired","func","ImmutablePropTypes","bool","connect","injectIntl"],"mappings":"gSAsBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,eAAiBC,eAAe,SAC9CC,WAAY,CAAEF,GAAG,mBAAqBC,eAAe,gBAGjDE,EAAkBC,YAAe,CAACC,GAASA,EAAMC,IAAI,WAAWC,GAC/DA,EAIEA,EAAMC,SAASC,QAAOC,KAAUA,IAAMC,MAAK,CAACC,EAAGC,IAAMD,EAAEN,IAAI,SAASQ,cAAcD,EAAEP,IAAI,YAHtFC,IAUX,MAAMQ,UAAcC,IAUlBC,4BACEC,KAAKC,MAAMC,SAASC,cACtB,CAEAC,SACE,MAAM,KAAEC,EAAI,MAAEhB,EAAK,YAAEiB,GAAgBN,KAAKC,MAE1C,IAAKZ,EACH,OACEkB,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAAC7B,GAAE,qBAAsBC,eAAe,6EAE9E,OACEwB,YAACC,IAAM,CAACI,gBAAiBN,EAAaO,MAAOR,EAAKS,cAAcnC,EAASE,eAAS,EAChF0B,YAACQ,IAAY,CAACC,MAAOX,EAAKS,cAAcnC,EAASE,SAAUoC,KAAK,UAAUC,cAAeC,IAAab,YAAaA,IAEnHC,YAACa,IAAW,IAEZb,YAACc,IAAc,CACbC,UAAU,QACVZ,aAAcA,EACda,QAAShB,YAACiB,IAAgB,CAACC,KAAMpB,EAAKS,cAAcnC,EAASK,cAC7D4B,gBAAiBN,QAAY,EAE5BjB,EAAMqC,KAAIC,GACTpB,YAACqB,IAAU,CAAsBC,GAAE,UAAAC,OAAYH,EAAKvC,IAAI,OAAS6B,KAAK,UAAUC,cAAeC,IAAaM,KAAME,EAAKvC,IAAI,UAA1GuC,EAAKvC,IAAI,UAI9BmB,YAACwB,IAAM,UACLxB,YAAA,kBAAQF,EAAKS,cAAcnC,EAASE,UACpC0B,YAAA,QAAMyB,KAAK,SAASC,QAAQ,aAIpC,EAEDC,YApDKrC,EAAK,YAEU,CACjBsC,OAAQC,IAAUC,OAAOC,WACzBpC,SAAUkC,IAAUG,KAAKD,WACzBjD,MAAOmD,IAAmBb,KAC1BtB,KAAM+B,IAAUC,OAAOC,WACvBhC,YAAa8B,IAAUK,OA+CZC,6BA1DSvD,IAAK,CAC3BE,MAAOJ,EAAgBE,MAyDVuD,CAAyBC,YAAW9C,G","file":"js/features/lists-438b4a3e0232b1ebe746.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport { fetchLists } from 'mastodon/actions/lists';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport ColumnLink from 'mastodon/features/ui/components/column_link';\nimport ColumnSubheading from 'mastodon/features/ui/components/column_subheading';\n\nimport NewListForm from './components/new_list_form';\n\nconst messages = defineMessages({\n  heading: { id: 'column.lists', defaultMessage: 'Lists' },\n  subheading: { id: 'lists.subheading', defaultMessage: 'Your lists' },\n});\n\nconst getOrderedLists = createSelector([state => state.get('lists')], lists => {\n  if (!lists) {\n    return lists;\n  }\n\n  return lists.toList().filter(item => !!item).sort((a, b) => a.get('title').localeCompare(b.get('title')));\n});\n\nconst mapStateToProps = state => ({\n  lists: getOrderedLists(state),\n});\n\nclass Lists extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    lists: ImmutablePropTypes.list,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchLists());\n  }\n\n  render () {\n    const { intl, lists, multiColumn } = this.props;\n\n    if (!lists) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.lists' defaultMessage=\"You don't have any lists yet. When you create one, it will show up here.\" />;\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.heading)}>\n        <ColumnHeader title={intl.formatMessage(messages.heading)} icon='list-ul' iconComponent={ListAltIcon} multiColumn={multiColumn} />\n\n        <NewListForm />\n\n        <ScrollableList\n          scrollKey='lists'\n          emptyMessage={emptyMessage}\n          prepend={<ColumnSubheading text={intl.formatMessage(messages.subheading)} />}\n          bindToDocument={!multiColumn}\n        >\n          {lists.map(list =>\n            <ColumnLink key={list.get('id')} to={`/lists/${list.get('id')}`} icon='list-ul' iconComponent={ListAltIcon} text={list.get('title')} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.heading)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Lists));\n"],"sourceRoot":""}