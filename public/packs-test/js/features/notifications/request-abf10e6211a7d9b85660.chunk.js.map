{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/notifications/request.jsx"],"names":["messages","defineMessages","title","id","defaultMessage","accept","dismiss","selectChild","ref","index","alignTop","container","current","node","element","querySelector","concat","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","NotificationRequest","_ref","multiColumn","params","columnRef","useRef","intl","useIntl","dispatch","useDispatch","notificationRequest","useSelector","state","getIn","accountId","get","account","notifications","isLoading","hasMore","removed","handleHeaderClick","useCallback","_columnRef$current","handleLoadMore","expandNotificationsForRequest","handleDismiss","dismissNotificationRequest","handleAccept","acceptNotificationRequest","handleMoveUp","elementIndex","findIndex","item","handleMoveDown","useEffect","fetchNotificationRequest","fetchNotificationsForRequest","columnTitle","formatMessage","name","_jsxs","Column","bindToDocument","label","children","_jsx","ColumnHeader","icon","iconComponent","InventoryIcon","onClick","showBackButton","extraButton","_Fragment","IconButton","className","VolumeOffIcon","DoneIcon","SensitiveMediaContextProvider","hideMediaByDefault","ScrollableList","scrollKey","trackScroll","showLoading","size","onLoadMore","map","NotificationContainer","notification","onMoveUp","onMoveDown","Helmet","content"],"mappings":"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","file":"js/features/notifications/request-abf10e6211a7d9b85660.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport DoneIcon from '@/material-icons/400-24px/done.svg?react';\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport VolumeOffIcon from '@/material-icons/400-24px/volume_off.svg?react';\nimport { fetchNotificationRequest, fetchNotificationsForRequest, expandNotificationsForRequest, acceptNotificationRequest, dismissNotificationRequest } from 'mastodon/actions/notifications';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { SensitiveMediaContextProvider } from 'mastodon/features/ui/util/sensitive_media_context';\n\nimport NotificationContainer from './containers/notification_container';\n\nconst messages = defineMessages({\n  title: { id: 'notification_requests.notifications_from', defaultMessage: 'Notifications from {name}' },\n  accept: { id: 'notification_requests.accept', defaultMessage: 'Accept' },\n  dismiss: { id: 'notification_requests.dismiss', defaultMessage: 'Dismiss' },\n});\n\nconst selectChild = (ref, index, alignTop) => {\n  const container = ref.current.node;\n  const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n  if (element) {\n    if (alignTop && container.scrollTop > element.offsetTop) {\n      element.scrollIntoView(true);\n    } else if (!alignTop && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n      element.scrollIntoView(false);\n    }\n\n    element.focus();\n  }\n};\n\nexport const NotificationRequest = ({ multiColumn, params: { id } }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const notificationRequest = useSelector(state => state.getIn(['notificationRequests', 'current', 'item', 'id']) === id ? state.getIn(['notificationRequests', 'current', 'item']) : null);\n  const accountId = notificationRequest?.get('account');\n  const account = useSelector(state => state.getIn(['accounts', accountId]));\n  const notifications = useSelector(state => state.getIn(['notificationRequests', 'current', 'notifications', 'items']));\n  const isLoading = useSelector(state => state.getIn(['notificationRequests', 'current', 'notifications', 'isLoading']));\n  const hasMore = useSelector(state => !!state.getIn(['notificationRequests', 'current', 'notifications', 'next']));\n  const removed = useSelector(state => state.getIn(['notificationRequests', 'current', 'removed']));\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, [columnRef]);\n\n  const handleLoadMore = useCallback(() => {\n    dispatch(expandNotificationsForRequest());\n  }, [dispatch]);\n\n  const handleDismiss = useCallback(() => {\n    dispatch(dismissNotificationRequest(id));\n  }, [dispatch, id]);\n\n  const handleAccept = useCallback(() => {\n    dispatch(acceptNotificationRequest(id));\n  }, [dispatch, id]);\n\n  const handleMoveUp = useCallback(id => {\n    const elementIndex = notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    selectChild(columnRef, elementIndex, true);\n  }, [columnRef, notifications]);\n\n  const handleMoveDown = useCallback(id => {\n    const elementIndex = notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    selectChild(columnRef, elementIndex, false);\n  }, [columnRef, notifications]);\n\n  useEffect(() => {\n    dispatch(fetchNotificationRequest(id));\n  }, [dispatch, id]);\n\n  useEffect(() => {\n    if (accountId) {\n      dispatch(fetchNotificationsForRequest(accountId));\n    }\n  }, [dispatch, accountId]);\n\n  const columnTitle = intl.formatMessage(messages.title, { name: account?.get('display_name') || account?.get('username') });\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={columnTitle}>\n      <ColumnHeader\n        icon='archive'\n        iconComponent={InventoryIcon}\n        title={columnTitle}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n        showBackButton\n        extraButton={!removed && (\n          <>\n            <IconButton className='column-header__button' iconComponent={VolumeOffIcon} onClick={handleDismiss} title={intl.formatMessage(messages.dismiss)} />\n            <IconButton className='column-header__button' iconComponent={DoneIcon} onClick={handleAccept} title={intl.formatMessage(messages.accept)} />\n          </>\n        )}\n      />\n\n      <SensitiveMediaContextProvider hideMediaByDefault>\n        <ScrollableList\n          scrollKey={`notification_requests/${id}`}\n          trackScroll={!multiColumn}\n          bindToDocument={!multiColumn}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          onLoadMore={handleLoadMore}\n        >\n          {notifications.map(item => (\n            item && <NotificationContainer\n              key={item.get('id')}\n              notification={item}\n              accountId={item.get('account')}\n              onMoveUp={handleMoveUp}\n              onMoveDown={handleMoveDown}\n            />\n          ))}\n        </ScrollableList>\n      </SensitiveMediaContextProvider>\n\n      <Helmet>\n        <title>{columnTitle}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nNotificationRequest.propTypes = {\n  multiColumn: PropTypes.bool,\n  params: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n  }),\n};\n\nexport default NotificationRequest;\n"],"sourceRoot":""}