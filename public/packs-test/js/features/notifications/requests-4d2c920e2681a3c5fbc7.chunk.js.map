{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/notifications/components/notification_request.jsx","webpack:///./app/javascript/mastodon/features/notifications/requests.jsx"],"names":["getAccount","makeGetAccount","messages","defineMessages","accept","id","defaultMessage","dismiss","NotificationRequest","_ref","accountId","notificationsCount","dispatch","useDispatch","account","useSelector","state","intl","useIntl","handleDismiss","useCallback","dismissNotificationRequest","handleAccept","acceptNotificationRequest","_jsx","className","Link","to","concat","Avatar","size","dangerouslySetInnerHTML","__html","get","toCappedNumber","IconButton","iconComponent","DeleteIcon","onClick","title","formatMessage","DoneIcon","NotificationRequests","multiColumn","columnRef","useRef","isLoading","getIn","notificationRequests","hasMore","handleHeaderClick","_columnRef$current","current","scrollTop","handleLoadMore","expandNotificationRequests","useEffect","fetchNotificationRequests","_jsxs","Column","bindToDocument","ref","label","children","ColumnHeader","icon","InventoryIcon","showBackButton","ScrollableList","scrollKey","trackScroll","showLoading","onLoadMore","emptyMessage","FormattedMessage","map","request","Helmet","name","content"],"mappings":"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","file":"js/features/notifications/requests-4d2c920e2681a3c5fbc7.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport DoneIcon from '@/material-icons/400-24px/done.svg?react';\nimport { acceptNotificationRequest, dismissNotificationRequest } from 'mastodon/actions/notifications';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport { toCappedNumber } from 'mastodon/utils/numbers';\n\nconst getAccount = makeGetAccount();\n\nconst messages = defineMessages({\n  accept: { id: 'notification_requests.accept', defaultMessage: 'Accept' },\n  dismiss: { id: 'notification_requests.dismiss', defaultMessage: 'Dismiss' },\n});\n\nexport const NotificationRequest = ({ id, accountId, notificationsCount }) => {\n  const dispatch = useDispatch();\n  const account = useSelector(state => getAccount(state, accountId));\n  const intl = useIntl();\n\n  const handleDismiss = useCallback(() => {\n    dispatch(dismissNotificationRequest(id));\n  }, [dispatch, id]);\n\n  const handleAccept = useCallback(() => {\n    dispatch(acceptNotificationRequest(id));\n  }, [dispatch, id]);\n\n  return (\n    <div className='notification-request'>\n      <Link to={`/notifications/requests/${id}`} className='notification-request__link'>\n        <Avatar account={account} size={36} />\n\n        <div className='notification-request__name'>\n          <div className='notification-request__name__display-name'>\n            <bdi><strong dangerouslySetInnerHTML={{ __html: account?.get('display_name_html') }} /></bdi>\n            <span className='filtered-notifications-banner__badge'>{toCappedNumber(notificationsCount)}</span>\n          </div>\n\n          <span>@{account?.get('acct')}</span>\n        </div>\n      </Link>\n\n      <div className='notification-request__actions'>\n        <IconButton iconComponent={DeleteIcon} onClick={handleDismiss} title={intl.formatMessage(messages.dismiss)} />\n        <IconButton iconComponent={DoneIcon} onClick={handleAccept} title={intl.formatMessage(messages.accept)} />\n      </div>\n    </div>\n  );\n};\n\nNotificationRequest.propTypes = {\n  id: PropTypes.string.isRequired,\n  accountId: PropTypes.string.isRequired,\n  notificationsCount: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport { fetchNotificationRequests, expandNotificationRequests } from 'mastodon/actions/notifications';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport ScrollableList from 'mastodon/components/scrollable_list';\n\nimport { NotificationRequest } from './components/notification_request';\n\nconst messages = defineMessages({\n  title: { id: 'notification_requests.title', defaultMessage: 'Filtered notifications' },\n});\n\nexport const NotificationRequests = ({ multiColumn }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.getIn(['notificationRequests', 'isLoading']));\n  const notificationRequests = useSelector(state => state.getIn(['notificationRequests', 'items']));\n  const hasMore = useSelector(state => !!state.getIn(['notificationRequests', 'next']));\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, [columnRef]);\n\n  const handleLoadMore = useCallback(() => {\n    dispatch(expandNotificationRequests());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchNotificationRequests());\n  }, [dispatch]);\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='archive'\n        iconComponent={InventoryIcon}\n        title={intl.formatMessage(messages.title)}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n        showBackButton\n      />\n\n      <ScrollableList\n        scrollKey='notification_requests'\n        trackScroll={!multiColumn}\n        bindToDocument={!multiColumn}\n        isLoading={isLoading}\n        showLoading={isLoading && notificationRequests.size === 0}\n        hasMore={hasMore}\n        onLoadMore={handleLoadMore}\n        emptyMessage={<FormattedMessage id='empty_column.notification_requests' defaultMessage='All clear! There is nothing here. When you receive new notifications, they will appear here according to your settings.' />}\n      >\n        {notificationRequests.map(request => (\n          <NotificationRequest\n            key={request.get('id')}\n            id={request.get('id')}\n            accountId={request.get('account')}\n            notificationsCount={request.get('notifications_count')}\n          />\n        ))}\n      </ScrollableList>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nNotificationRequests.propTypes = {\n  multiColumn: PropTypes.bool,\n};\n\nexport default NotificationRequests;\n"],"sourceRoot":""}