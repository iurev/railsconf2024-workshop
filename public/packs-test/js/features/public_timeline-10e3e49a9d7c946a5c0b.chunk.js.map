{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/public_timeline/components/column_settings.jsx","webpack:///./app/javascript/mastodon/features/public_timeline/containers/column_settings_container.js","webpack:///./app/javascript/mastodon/features/public_timeline/index.jsx"],"names":["ColumnSettings","PureComponent","render","settings","onChange","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","id","defaultMessage","injectIntl","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","messages","defineMessages","title","PublicTimeline","constructor","arguments","_defineProperty","onlyMedia","onlyRemote","removeColumn","addColumn","other","dir","moveColumn","column","scrollTop","maxId","expandPublicTimeline","componentDidMount","signedIn","context","identity","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","intl","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","ref","setRef","formatMessage","children","ColumnHeader","icon","iconComponent","PublicIcon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","ColumnSettingsContainer","StatusListContainer","prepend","DismissableBanner","values","domain","timelineId","concat","onLoadMore","handleLoadMore","trackScroll","scrollKey","emptyMessage","Helmet","name","content","PropTypes","object","timelineState"],"mappings":"8RASA,MAAMA,UAAuBC,gBAS3BC,SACE,MAAM,SAAEC,EAAQ,SAAEC,GAAaC,KAAKC,MAEpC,OACEC,YAAA,OAAKC,UAAU,wBAAiB,EAC9BD,YAAA,oBACEA,YAAA,OAAKC,UAAU,6BAAsB,EACnCD,YAACE,IAAa,CAACN,SAAUA,EAAUO,YAAa,CAAC,QAAS,aAAcN,SAAUA,EAAUO,MAAOJ,YAACK,IAAgB,CAACC,GAAE,uCAAwCC,eAAe,iBAC9KP,YAACE,IAAa,CAACN,SAAUA,EAAUO,YAAa,CAAC,QAAS,cAAeN,SAAUA,EAAUO,MAAOJ,YAACK,IAAgB,CAACC,GAAE,wCAAyCC,eAAe,oBAK1L,EAIaC,kBAAWf,GCPXgB,yBAtBSC,CAACC,EAAKC,KAAoB,IAAlB,SAAEC,GAAUD,EAC1C,MAAME,EAAOD,EACPE,EAAUJ,EAAMK,MAAM,CAAC,WAAY,YACnCC,EAAQF,EAAQG,WAAUC,GAAKA,EAAEC,IAAI,UAAYN,IAEvD,MAAO,CACLlB,SAAWkB,GAAQG,GAAS,EAAKF,EAAQK,IAAIH,GAAOG,IAAI,UAAYT,EAAMK,MAAM,CAAC,WAAY,WAC9F,IAGwBK,CAACC,EAAQC,KAAoB,IAAlB,SAAEV,GAAUU,EAChD,MAAO,CACL1B,SAAU2B,EAAKC,GAEXH,EADET,EACOa,YAAmBb,EAAUW,EAAKC,GAElCE,YAAc,CAAC,YAAaH,GAAMC,GAE/C,EACD,GAGYhB,CAA6ChB,G,OCN5D,MAAMmC,EAAWC,YAAe,CAC9BC,MAAO,CAAExB,GAAG,gBAAkBC,eAAe,wBAkB/C,MAAMwB,UAAuBrC,gBAAcsC,cAAA,SAAAC,WAAAC,YAAA,kBAoB7B,KACV,MAAM,SAAErB,EAAQ,SAAES,EAAQ,UAAEa,EAAS,WAAEC,GAAetC,KAAKC,MAGzDuB,EADET,EACOwB,YAAaxB,GAEbyB,YAAUF,EAAa,SAAW,SAAU,CAAEG,MAAO,CAAEJ,YAAWC,gBAC7E,IACDF,YAAA,mBAEaM,IACZ,MAAM,SAAE3B,EAAQ,SAAES,GAAaxB,KAAKC,MACpCuB,EAASmB,YAAW5B,EAAU2B,GAAK,IACpCN,YAAA,0BAEmB,KAClBpC,KAAK4C,OAAOC,WAAW,IACxBT,YAAA,eAsCQf,IACPrB,KAAK4C,OAASvB,CAAC,IAChBe,YAAA,uBAEgBU,IACf,MAAM,SAAEtB,EAAQ,UAAEa,EAAS,WAAEC,GAAetC,KAAKC,MAEjDuB,EAASuB,YAAqB,CAAED,QAAOT,YAAWC,eAAc,GACjE,CA5CDU,oBACE,MAAM,SAAExB,EAAQ,UAAEa,EAAS,WAAEC,GAAetC,KAAKC,OAC3C,SAAEgD,GAAajD,KAAKkD,QAAQC,SAElC3B,EAASuB,YAAqB,CAAEV,YAAWC,gBAEvCW,IACFjD,KAAKoD,WAAa5B,EAAS6B,YAAoB,CAAEhB,YAAWC,gBAEhE,CAEAgB,mBAAoBC,GAClB,MAAM,SAAEN,GAAajD,KAAKkD,QAAQC,SAElC,GAAII,EAAUlB,YAAcrC,KAAKC,MAAMoC,WAAakB,EAAUjB,aAAetC,KAAKC,MAAMqC,WAAY,CAClG,MAAM,SAAEd,EAAQ,UAAEa,EAAS,WAAEC,GAAetC,KAAKC,MAE7CD,KAAKoD,YACPpD,KAAKoD,aAGP5B,EAASuB,YAAqB,CAAEV,YAAWC,gBAEvCW,IACFjD,KAAKoD,WAAa5B,EAAS6B,YAAoB,CAAEhB,YAAWC,gBAEhE,CACF,CAEAkB,uBACMxD,KAAKoD,aACPpD,KAAKoD,aACLpD,KAAKoD,WAAa,KAEtB,CAYAvD,SACE,MAAM,KAAE4D,EAAI,SAAE1C,EAAQ,UAAE2C,EAAS,YAAEC,EAAW,UAAEtB,EAAS,WAAEC,GAAetC,KAAKC,MACzE2D,IAAW7C,EAEjB,OACE8C,eAACC,IAAM,CAACC,gBAAiBJ,EAAaK,IAAKhE,KAAKiE,OAAQ3D,MAAOmD,EAAKS,cAAcpC,EAASE,OAAOmC,SAAA,CAChGjE,YAACkE,IAAY,CACXC,KAAK,QACLC,cAAeC,IACfC,OAAQd,EACR1B,MAAOyB,EAAKS,cAAcpC,EAASE,OACnCyC,MAAOzE,KAAK0E,UACZC,OAAQ3E,KAAK4E,WACbC,QAAS7E,KAAK8E,kBACdlB,OAAQA,EACRD,YAAaA,QAAY,EAEzBzD,YAAC6E,EAAuB,CAAChE,SAAUA,KAGrCb,YAAC8E,IAAmB,CAClBC,QAAS/E,YAACgF,IAAiB,CAAC1E,GAAG,wBAAiB,EAACN,YAACK,IAAgB,CAACC,GAAE,qCAAsCC,eAAe,uGAAuG0E,OAAQ,CAAEC,eAC3OC,WAAU,SAAAC,OAAWhD,EAAa,UAAY,IAAEgD,OAAGjD,EAAY,SAAW,IAC1EkD,WAAYvF,KAAKwF,eACjBC,aAAc7B,EACd8B,UAAS,mBAAAJ,OAAqBvE,GAC9B4E,aAAczF,YAACK,IAAgB,CAACC,GAAE,sBAAuBC,eAAe,+GACxEsD,gBAAiBJ,IAGnBzD,YAAC0F,IAAM,UACL1F,YAAA,kBAAQuD,EAAKS,cAAcpC,EAASE,QACpC9B,YAAA,QAAM2F,KAAK,SAASC,QAAQ,eAIpC,EAED1D,YA3HKH,EAAc,eAEI,CACpBkB,SAAU4C,IAAUC,SACrB5D,YAJGH,EAAc,eAMI,CACpBI,WAAW,IAsHA1B,6BA5ISC,CAACC,EAAKC,KAAoB,IAAlB,SAAEC,GAAUD,EAC1C,MAAME,EAAOD,EACPE,EAAUJ,EAAMK,MAAM,CAAC,WAAY,YACnCC,EAAQF,EAAQG,WAAUC,GAAKA,EAAEC,IAAI,UAAYN,IACjDqB,EAAatB,GAAYI,GAAS,EAAKF,EAAQK,IAAIH,GAAOD,MAAM,CAAC,SAAU,QAAS,cAAgBL,EAAMK,MAAM,CAAC,WAAY,SAAU,QAAS,cAChJoB,EAAcvB,GAAYI,GAAS,EAAKF,EAAQK,IAAIH,GAAOD,MAAM,CAAC,SAAU,QAAS,eAAiBL,EAAMK,MAAM,CAAC,WAAY,SAAU,QAAS,eAClJ+E,EAAgBpF,EAAMK,MAAM,CAAC,YAAY,SAADoE,OAAWhD,EAAa,UAAY,IAAEgD,OAAGjD,EAAY,SAAW,MAE9G,MAAO,CACLqB,YAAauC,GAAiBA,EAAc3E,IAAI,UAAY,EAC5De,YACAC,aACD,GAgIY3B,CAAyBD,YAAWuB,G","file":"js/features/public_timeline-10e3e49a9d7c946a5c0b.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div className='column-settings'>\n        <section>\n          <div className='column-settings__row'>\n            <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n            <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport PublicIcon from '@/material-icons/400-24px/public.svg?react';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { domain } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { connectPublicStream } from '../../actions/streaming';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const timelineState = state.getIn(['timelines', `public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n  };\n};\n\nclass PublicTimeline extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote }));\n  };\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          iconComponent={PublicIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='public_timeline'><FormattedMessage id='dismissable_banner.public_timeline' defaultMessage='These are the most recent public posts from people on the social web that people on {domain} follow.' values={{ domain }} /></DismissableBanner>}\n          timelineId={`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(PublicTimeline));\n"],"sourceRoot":""}