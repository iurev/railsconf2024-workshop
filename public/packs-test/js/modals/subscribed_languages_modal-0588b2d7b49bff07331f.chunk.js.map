{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/subscribed_languages_modal/index.jsx"],"names":["messages","defineMessages","close","id","defaultMessage","getAccountLanguages","createSelector","state","accountId","getIn","concat","ImmutableList","get","statusIds","statuses","ImmutableSet","map","statusId","filter","status","SubscribedLanguagesModal","ImmutablePureComponent","constructor","arguments","_defineProperty","selectedLanguages","this","props","value","checked","setState","add","delete","onSubmit","toArray","onClose","renderItem","language","languages","find","includes","_jsx","Option","name","label","onToggle","handleLanguageToggle","multiple","render","acct","availableLanguages","intl","className","IconButton","title","formatMessage","icon","iconComponent","CloseIcon","onClick","size","FormattedMessage","values","target","union","Button","disabled","is","handleSubmit","PropTypes","string","isRequired","ImmutablePropTypes","setOf","func","arrayOf","object","submit","preloadedLanguages","connect","mapStateToProps","_ref","mapDispatchToProps","dispatch","_ref2","followAccount","injectIntl"],"mappings":"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","file":"js/modals/subscribed_languages_modal-0588b2d7b49bff07331f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { is, List as ImmutableList, Set as ImmutableSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { followAccount } from 'mastodon/actions/accounts';\nimport { Button } from 'mastodon/components/button';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport Option from 'mastodon/features/report/components/option';\nimport { languages as preloadedLanguages } from 'mastodon/initial_state';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst getAccountLanguages = createSelector([\n  (state, accountId) => state.getIn(['timelines', `account:${accountId}`, 'items'], ImmutableList()),\n  state => state.get('statuses'),\n], (statusIds, statuses) =>\n  new ImmutableSet(statusIds.map(statusId => statuses.get(statusId)).filter(status => !status.get('reblog')).map(status => status.get('language'))));\n\nconst mapStateToProps = (state, { accountId }) => ({\n  acct: state.getIn(['accounts', accountId, 'acct']),\n  availableLanguages: getAccountLanguages(state, accountId),\n  selectedLanguages: ImmutableSet(state.getIn(['relationships', accountId, 'languages']) || ImmutableList()),\n});\n\nconst mapDispatchToProps = (dispatch, { accountId }) => ({\n\n  onSubmit (languages) {\n    dispatch(followAccount(accountId, { languages }));\n  },\n\n});\n\nclass SubscribedLanguagesModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    acct: PropTypes.string.isRequired,\n    availableLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    selectedLanguages: ImmutablePropTypes.setOf(PropTypes.string),\n    onClose: PropTypes.func.isRequired,\n    languages: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n    intl: PropTypes.object.isRequired,\n    submit: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    languages: preloadedLanguages,\n  };\n\n  state = {\n    selectedLanguages: this.props.selectedLanguages,\n  };\n\n  handleLanguageToggle = (value, checked) => {\n    const { selectedLanguages } = this.state;\n\n    if (checked) {\n      this.setState({ selectedLanguages: selectedLanguages.add(value) });\n    } else {\n      this.setState({ selectedLanguages: selectedLanguages.delete(value) });\n    }\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.selectedLanguages.toArray());\n    this.props.onClose();\n  };\n\n  renderItem (value) {\n    const language = this.props.languages.find(language => language[0] === value);\n    const checked = this.state.selectedLanguages.includes(value);\n\n    if (!language) {\n      return null;\n    }\n\n    return (\n      <Option\n        key={value}\n        name='languages'\n        value={value}\n        label={language[1]}\n        checked={checked}\n        onToggle={this.handleLanguageToggle}\n        multiple\n      />\n    );\n  }\n\n  render () {\n    const { acct, availableLanguages, selectedLanguages, intl, onClose } = this.props;\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' iconComponent={CloseIcon} onClick={onClose} size={20} />\n          <FormattedMessage id='subscribed_languages.target' defaultMessage='Change subscribed languages for {target}' values={{ target: <strong>{acct}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='subscribed_languages.lead' defaultMessage='Only posts in selected languages will appear on your home and list timelines after the change. Select none to receive posts in all languages.' /></p>\n\n          <div>\n            {availableLanguages.union(selectedLanguages).delete(null).map(value => this.renderItem(value))}\n          </div>\n\n          <div className='flex-spacer' />\n\n          <div className='report-dialog-modal__actions'>\n            <Button disabled={is(this.state.selectedLanguages, this.props.selectedLanguages)} onClick={this.handleSubmit}><FormattedMessage id='subscribed_languages.save' defaultMessage='Save changes' /></Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SubscribedLanguagesModal));\n"],"sourceRoot":""}