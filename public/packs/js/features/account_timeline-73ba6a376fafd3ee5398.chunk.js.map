{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/account_timeline/index.jsx"],"names":["emptyList","ImmutableList","RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","AccountTimeline","ImmutablePureComponent","constructor","arguments","_defineProperty","maxId","this","props","dispatch","expandAccountTimeline","accountId","withReplies","tagged","params","_load","fetchAccount","expandAccountFeaturedTimeline","fetchFeaturedTags","me","connectTimeline","concat","componentDidMount","acct","lookupAccount","componentDidUpdate","prevProps","disconnectTimeline","componentWillUnmount","render","statusIds","featuredStatusIds","isLoading","hasMore","blockedBy","suspended","isAccount","hidden","multiColumn","remote","remoteUrl","isEmpty","Column","LoadingIndicator","BundleColumnError","errorType","emptyMessage","forceEmptyState","LimitedAccountHint","remoteMessage","ColumnBackButton","StatusList","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","handleLoadMore","bindToDocument","timelineId","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","path","getAccountHidden"],"mappings":"2TA0BA,MAAMA,EAAYC,iBAmCZC,EAAaC,IAAA,IAAC,IAAEC,GAAKD,EAAA,OACzBE,YAACC,IAAY,CAACF,IAAKA,EAAKG,SAAUF,YAACG,IAAgB,CAACC,GAAE,mCAAoCC,eAAe,iBAAoB,EAO/H,MAAMC,UAAwBC,IAAuBC,cAAA,SAAAC,WAAAC,YAAA,uBA8ElCC,IACfC,KAAKC,MAAMC,SAASC,YAAsBH,KAAKC,MAAMG,UAAW,CAAEL,QAAOM,YAAaL,KAAKC,MAAMI,YAAaC,OAAQN,KAAKC,MAAMM,OAAOD,SAAU,GACnJ,CAxDDE,QACE,MAAM,UAAEJ,EAAS,YAAEC,EAAaE,QAAQ,OAAED,GAAQ,SAAEJ,GAAaF,KAAKC,MAEtEC,EAASO,YAAaL,IAEjBC,GACHH,EAASQ,YAA8BN,EAAW,CAAEE,YAGtDJ,EAASS,YAAkBP,IAC3BF,EAASC,YAAsBC,EAAW,CAAEC,cAAaC,YAErDF,IAAcQ,KAChBV,EAASW,YAAgB,WAADC,OAAYF,MAExC,CAEAG,oBACE,MAAQR,QAAQ,KAAES,GAAM,UAAEZ,EAAS,SAAEF,GAAaF,KAAKC,MAEnDG,EACFJ,KAAKQ,QAELN,EAASe,YAAcD,GAE3B,CAEAE,mBAAoBC,GAClB,MAAQZ,QAAQ,KAAES,EAAI,OAAEV,GAAQ,UAAEF,EAAS,YAAEC,EAAW,SAAEH,GAAaF,KAAKC,MAExEkB,EAAUf,YAAcA,GAAaA,EACvCJ,KAAKQ,QACIW,EAAUZ,OAAOS,OAASA,EACnCd,EAASe,YAAcD,IACdG,EAAUZ,OAAOD,SAAWA,IAChCD,GACHH,EAASQ,YAA8BN,EAAW,CAAEE,YAEtDJ,EAASC,YAAsBC,EAAW,CAAEC,cAAaC,aAGvDa,EAAUf,YAAcQ,KAAMR,IAAcQ,KAC9CV,EAASkB,YAAmB,WAADN,OAAYF,MAE3C,CAEAS,uBACE,MAAM,SAAEnB,EAAQ,UAAEE,GAAcJ,KAAKC,MAEjCG,IAAcQ,KAChBV,EAASkB,YAAmB,WAADN,OAAYF,MAE3C,CAMAU,SACE,MAAM,UAAElB,EAAS,UAAEmB,EAAS,kBAAEC,EAAiB,UAAEC,EAAS,QAAEC,EAAO,UAAEC,EAAS,UAAEC,EAAS,UAAEC,EAAS,OAAEC,EAAM,YAAEC,EAAW,OAAEC,EAAM,UAAEC,GAAcjC,KAAKC,MAEtJ,GAAIwB,GAAaF,EAAUW,UACzB,OACE9C,YAAC+C,IAAM,UACL/C,YAACgD,IAAgB,KAGhB,IAAKX,IAAcI,EACxB,OACEzC,YAACiD,IAAiB,CAACN,YAAaA,EAAaO,UAAU,YAI3D,IAAIC,EAEJ,MAAMC,EAAkBZ,GAAaD,GAAaG,EAGhDS,EADEX,EACaxC,YAACG,IAAgB,CAACC,GAAE,iCAAkCC,eAAe,sBAC3EqC,EACM1C,YAACqD,IAAkB,CAACrC,UAAWA,IACrCuB,EACMvC,YAACG,IAAgB,CAACC,GAAE,mCAAoCC,eAAe,wBAC7EuC,GAAUT,EAAUW,UACd9C,YAACH,EAAU,CAACE,IAAK8C,IAEjB7C,YAACG,IAAgB,CAACC,GAAE,gCAAiCC,eAAe,mBAGrF,MAAMiD,EAAgBV,EAAS5C,YAACH,EAAU,CAACE,IAAK8C,IAAgB,KAEhE,OACE7C,YAAC+C,IAAM,UACL/C,YAACuD,IAAgB,IAEjBvD,YAACwD,IAAU,CACTC,QAASzD,YAAC0D,IAAe,CAAC1C,UAAWJ,KAAKC,MAAMG,UAAW2C,SAAUP,EAAiBlC,OAAQN,KAAKC,MAAMM,OAAOD,SAChH0C,eAAa,EACbC,OAAQP,EACRQ,UAAU,mBACV3B,UAAWiB,EAAkBzD,EAAYwC,EACzCC,kBAAmBA,EACnBC,UAAWA,EACXC,SAAUc,GAAmBd,EAC7ByB,WAAYnD,KAAKoD,eACjBb,aAAcA,EACdc,gBAAiBtB,EACjBuB,WAAW,YAInB,EAEDxD,YAzIKJ,EAAe,YAEA,CACjBa,OAAQgD,IAAUC,MAAM,CACtBxC,KAAMuC,IAAUE,OAChBjE,GAAI+D,IAAUE,OACdnD,OAAQiD,IAAUE,SACjBC,WACHtD,UAAWmD,IAAUE,OACrBvD,SAAUqD,IAAUI,KAAKD,WACzBnC,UAAWqC,IAAmBC,KAC9BrC,kBAAmBoC,IAAmBC,KACtCpC,UAAW8B,IAAUO,KACrBpC,QAAS6B,IAAUO,KACnBzD,YAAakD,IAAUO,KACvBnC,UAAW4B,IAAUO,KACrBjC,UAAW0B,IAAUO,KACrBlC,UAAW2B,IAAUO,KACrBhC,OAAQyB,IAAUO,KAClB9B,OAAQuB,IAAUO,KAClB7B,UAAWsB,IAAUE,OACrB1B,YAAawB,IAAUO,OAsHZC,6BApLSC,CAACC,EAAKC,KAA6D,IAAzD3D,QAAQ,KAAES,EAAI,GAAExB,EAAE,OAAEc,GAAQ,YAAED,GAAc,GAAO6D,EACnF,MAAM9D,EAAYZ,GAAMyE,EAAME,MAAM,CAAC,eAAgBC,YAAmBpD,KAExE,GAAkB,OAAdZ,EACF,MAAO,CACLqB,WAAW,EACXI,WAAW,EACXN,UAAWxC,GAER,IAAKqB,EACV,MAAO,CACLqB,WAAW,EACXF,UAAWxC,GAIf,MAAMsF,EAAOhE,EAAW,GAAAS,OAAMV,EAAS,oBAAAU,OAAqBV,GAASU,OAAGR,EAAM,IAAAQ,OAAOR,GAAW,IAEhG,MAAO,CACLF,YACA4B,SAAWiC,EAAME,MAAM,CAAC,WAAY/D,EAAW,WAAa6D,EAAME,MAAM,CAAC,WAAY/D,EAAW,cAChG6B,UAAWgC,EAAME,MAAM,CAAC,WAAY/D,EAAW,QAC/CyB,YAAaoC,EAAME,MAAM,CAAC,WAAY/D,IACtCmB,UAAW0C,EAAME,MAAM,CAAC,YAAY,WAADrD,OAAauD,GAAQ,SAAUtF,GAClEyC,kBAAmBnB,EAAcrB,iBAAkBiF,EAAME,MAAM,CAAC,YAAY,WAADrD,OAAaV,EAAS,WAAAU,OAAUR,EAAM,IAAAQ,OAAOR,GAAW,IAAM,SAAUvB,GACnJ0C,UAAWwC,EAAME,MAAM,CAAC,YAAY,WAADrD,OAAauD,GAAQ,cACxD3C,QAASuC,EAAME,MAAM,CAAC,YAAY,WAADrD,OAAauD,GAAQ,YACtDzC,UAAWqC,EAAME,MAAM,CAAC,WAAY/D,EAAW,cAAc,GAC7D0B,OAAQwC,YAAiBL,EAAO7D,GAChCuB,UAAWsC,EAAME,MAAM,CAAC,gBAAiB/D,EAAW,eAAe,GACpE,GAsJY2D,CAAyBrE,E","file":"js/features/account_timeline-73ba6a376fafd3ee5398.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { TimelineHint } from 'mastodon/components/timeline_hint';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport { me } from 'mastodon/initial_state';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\nimport { getAccountHidden } from 'mastodon/selectors';\n\nimport { lookupAccount, fetchAccount } from '../../actions/accounts';\nimport { fetchFeaturedTags } from '../../actions/featured_tags';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline, connectTimeline, disconnectTimeline } from '../../actions/timelines';\nimport { ColumnBackButton } from '../../components/column_back_button';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport StatusList from '../../components/status_list';\nimport Column from '../ui/components/column';\n\nimport { LimitedAccountHint } from './components/limited_account_hint';\nimport HeaderContainer from './containers/header_container';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(fetchFeaturedTags(accountId));\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n\n    if (prevProps.accountId === me && accountId !== me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, accountId } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline(`account:${me}`));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, blockedBy, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || blockedBy || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={this.props.params.tagged} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(AccountTimeline);\n"],"sourceRoot":""}