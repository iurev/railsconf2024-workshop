{"version":3,"sources":["webpack:///./app/javascript/mastodon/components/avatar_composite.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversation.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/components/conversations_list.jsx","webpack:///./app/javascript/mastodon/features/direct_timeline/index.jsx"],"names":["AvatarComposite","PureComponent","renderItem","account","size","index","animate","this","props","width","height","top","left","bottom","right","style","concat","_jsx","get","Avatar","render","accounts","className","take","map","i","Math","min","_defineProperty","autoPlayGif","messages","defineMessages","more","id","defaultMessage","open","reply","markAsRead","delete","muteConversation","unmuteConversation","replyConfirm","replyMessage","getAccounts","createSelector","state","_","accountIds","getStatus","makeGetStatus","Conversation","_ref","conversation","scrollKey","onMoveUp","onMoveDown","unread","lastStatusId","intl","useIntl","dispatch","useDispatch","history","useHistory","lastStatus","useSelector","handleMouseEnter","useCallback","_ref2","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref3","handleClick","markConversationRead","push","getIn","handleMarkAsRead","handleReply","getState","trim","openModal","modalType","modalProps","message","formatMessage","confirm","onConfirm","replyCompose","handleDelete","deleteConversation","handleHotkeyMoveUp","handleHotkeyMoveDown","handleConversationMute","unmuteStatus","muteStatus","handleShowMore","revealStatus","hideStatus","menu","text","action","names","a","Link","to","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","HotKeys","classNames","tabIndex","onClick","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","FormattedMessage","values","StatusContent","status","expanded","onExpandedToggle","collapsible","AttachmentList","compact","media","IconButton","icon","iconComponent","ReplyIcon","DropdownMenuContainer","items","MoreHorizIcon","direction","focusChild","node","alignTop","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","ConversationsList","_conversations$last","other","listRef","useRef","conversations","isLoading","hasMore","last","handleMoveUp","elementIndex","findIndex","x","current","handleMoveDown","debouncedLoadMore","useMemo","_debounce","expandConversations","maxId","leading","handleLoadMore","_jsx2","ScrollableList","showLoading","isEmpty","onLoadMore","ref","children","item","DirectTimeline","columnId","multiColumn","columnRef","pinned","handlePin","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","useEffect","mountConversations","disconnect","connectDirectStream","unmountConversations","_jsxs","Column","bindToDocument","label","ColumnHeader","AlternateEmailIcon","onPin","onMove","trackScroll","emptyMessage","prepend","href","target","alwaysPrepend","Helmet","name","content"],"mappings":"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","file":"js/features/direct_timeline-890d5e936882faa3b1a3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { autoPlayGif } from '../initial_state';\n\nimport { Avatar } from './avatar';\n\nexport default class AvatarComposite extends PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style}>\n        <Avatar account={account} animate={animate} />\n      </div>\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { useDispatch, useSelector } from 'react-redux';\n\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport ReplyIcon from '@/material-icons/400-24px/reply.svg?react';\nimport { replyCompose } from 'mastodon/actions/compose';\nimport { markConversationRead, deleteConversation } from 'mastodon/actions/conversations';\nimport { openModal } from 'mastodon/actions/modal';\nimport { muteStatus, unmuteStatus, revealStatus, hideStatus } from 'mastodon/actions/statuses';\nimport AttachmentList from 'mastodon/components/attachment_list';\nimport AvatarComposite from 'mastodon/components/avatar_composite';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport StatusContent from 'mastodon/components/status_content';\nimport DropdownMenuContainer from 'mastodon/containers/dropdown_menu_container';\nimport { autoPlayGif } from 'mastodon/initial_state';\nimport { makeGetStatus } from 'mastodon/selectors';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst getAccounts = createSelector(\n  (state) => state.get('accounts'),\n  (_, accountIds) => accountIds,\n  (accounts, accountIds) =>\n    accountIds.map(id => accounts.get(id))\n);\n\nconst getStatus = makeGetStatus();\n\nexport const Conversation = ({ conversation, scrollKey, onMoveUp, onMoveDown }) => {\n  const id = conversation.get('id');\n  const unread = conversation.get('unread');\n  const lastStatusId = conversation.get('last_status');\n  const accountIds = conversation.get('accounts');\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const lastStatus = useSelector(state => getStatus(state, { id: lastStatusId }));\n  const accounts = useSelector(state => getAccounts(state, accountIds));\n\n  const handleMouseEnter = useCallback(({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  }, []);\n\n  const handleMouseLeave = useCallback(({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  }, []);\n\n  const handleClick = useCallback(() => {\n    if (unread) {\n      dispatch(markConversationRead(id));\n    }\n\n    history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  }, [dispatch, history, unread, id, lastStatus]);\n\n  const handleMarkAsRead = useCallback(() => {\n    dispatch(markConversationRead(id));\n  }, [dispatch, id]);\n\n  const handleReply = useCallback(() => {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal({\n          modalType: 'CONFIRM',\n          modalProps: {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: () => dispatch(replyCompose(lastStatus, history)),\n          },\n        }));\n      } else {\n        dispatch(replyCompose(lastStatus, history));\n      }\n    });\n  }, [dispatch, lastStatus, history, intl]);\n\n  const handleDelete = useCallback(() => {\n    dispatch(deleteConversation(id));\n  }, [dispatch, id]);\n\n  const handleHotkeyMoveUp = useCallback(() => {\n    onMoveUp(id);\n  }, [id, onMoveUp]);\n\n  const handleHotkeyMoveDown = useCallback(() => {\n    onMoveDown(id);\n  }, [id, onMoveDown]);\n\n  const handleConversationMute = useCallback(() => {\n    if (lastStatus.get('muted')) {\n      dispatch(unmuteStatus(lastStatus.get('id')));\n    } else {\n      dispatch(muteStatus(lastStatus.get('id')));\n    }\n  }, [dispatch, lastStatus]);\n\n  const handleShowMore = useCallback(() => {\n    if (lastStatus.get('hidden')) {\n      dispatch(revealStatus(lastStatus.get('id')));\n    } else {\n      dispatch(hideStatus(lastStatus.get('id')));\n    }\n  }, [dispatch, lastStatus]);\n\n  if (!lastStatus) {\n    return null;\n  }\n\n  const menu = [\n    { text: intl.formatMessage(messages.open), action: handleClick },\n    null,\n    { text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: handleConversationMute },\n  ];\n\n  if (unread) {\n    menu.push({ text: intl.formatMessage(messages.markAsRead), action: handleMarkAsRead });\n    menu.push(null);\n  }\n\n  menu.push({ text: intl.formatMessage(messages.delete), action: handleDelete });\n\n  const names = accounts.map(a => (\n    <Link to={`/@${a.get('acct')}`} key={a.get('id')} title={a.get('acct')}>\n      <bdi>\n        <strong\n          className='display-name__html'\n          dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }}\n        />\n      </bdi>\n    </Link>\n  )).reduce((prev, cur) => [prev, ', ', cur]);\n\n  const handlers = {\n    reply: handleReply,\n    open: handleClick,\n    moveUp: handleHotkeyMoveUp,\n    moveDown: handleHotkeyMoveDown,\n    toggleHidden: handleShowMore,\n  };\n\n  return (\n    <HotKeys handlers={handlers}>\n      <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex={0}>\n        <div className='conversation__avatar' onClick={handleClick} role='presentation'>\n          <AvatarComposite accounts={accounts} size={48} />\n        </div>\n\n        <div className='conversation__content'>\n          <div className='conversation__content__info'>\n            <div className='conversation__content__relative-time'>\n              {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n            </div>\n\n            <div className='conversation__content__names' onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n              <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n            </div>\n          </div>\n\n          <StatusContent\n            status={lastStatus}\n            onClick={handleClick}\n            expanded={!lastStatus.get('hidden')}\n            onExpandedToggle={handleShowMore}\n            collapsible\n          />\n\n          {lastStatus.get('media_attachments').size > 0 && (\n            <AttachmentList\n              compact\n              media={lastStatus.get('media_attachments')}\n            />\n          )}\n\n          <div className='status__action-bar'>\n            <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' iconComponent={ReplyIcon} onClick={handleReply} />\n\n            <div className='status__action-bar-dropdown'>\n              <DropdownMenuContainer\n                scrollKey={scrollKey}\n                status={lastStatus}\n                items={menu}\n                icon='ellipsis-h'\n                iconComponent={MoreHorizIcon}\n                size={18}\n                direction='right'\n                title={intl.formatMessage(messages.more)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </HotKeys>\n  );\n};\n\nConversation.propTypes = {\n  conversation: ImmutablePropTypes.map.isRequired,\n  scrollKey: PropTypes.string,\n  onMoveUp: PropTypes.func,\n  onMoveDown: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useMemo, useCallback } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { expandConversations } from 'mastodon/actions/conversations';\nimport ScrollableList from 'mastodon/components/scrollable_list';\n\nimport { Conversation } from './conversation';\n\nconst focusChild = (node, index, alignTop) => {\n  const element = node.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n  if (element) {\n    if (alignTop && node.scrollTop > element.offsetTop) {\n      element.scrollIntoView(true);\n    } else if (!alignTop && node.scrollTop + node.clientHeight < element.offsetTop + element.offsetHeight) {\n      element.scrollIntoView(false);\n    }\n\n    element.focus();\n  }\n};\n\nexport const ConversationsList = ({ scrollKey, ...other }) => {\n  const listRef = useRef();\n  const conversations = useSelector(state => state.getIn(['conversations', 'items']));\n  const isLoading = useSelector(state => state.getIn(['conversations', 'isLoading'], true));\n  const hasMore = useSelector(state => state.getIn(['conversations', 'hasMore'], false));\n  const dispatch = useDispatch();\n  const lastStatusId = conversations.last()?.get('last_status');\n\n  const handleMoveUp = useCallback(id => {\n    const elementIndex = conversations.findIndex(x => x.get('id') === id) - 1;\n    focusChild(listRef.current.node, elementIndex, true);\n  }, [listRef, conversations]);\n\n  const handleMoveDown = useCallback(id => {\n    const elementIndex = conversations.findIndex(x => x.get('id') === id) + 1;\n    focusChild(listRef.current.node, elementIndex, false);\n  }, [listRef, conversations]);\n\n  const debouncedLoadMore = useMemo(() => debounce(id => {\n    dispatch(expandConversations({ maxId: id }));\n  }, 300, { leading: true }), [dispatch]);\n\n  const handleLoadMore = useCallback(() => {\n    if (lastStatusId) {\n      debouncedLoadMore(lastStatusId);\n    }\n  }, [debouncedLoadMore, lastStatusId]);\n\n  return (\n    <ScrollableList {...other} scrollKey={scrollKey} isLoading={isLoading} showLoading={isLoading && conversations.isEmpty()} hasMore={hasMore} onLoadMore={handleLoadMore} ref={listRef}>\n      {conversations.map(item => (\n        <Conversation\n          key={item.get('id')}\n          conversation={item}\n          onMoveUp={handleMoveUp}\n          onMoveDown={handleMoveDown}\n          scrollKey={scrollKey}\n        />\n      ))}\n    </ScrollableList>\n  );\n};\n\nConversationsList.propTypes = {\n  scrollKey: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useDispatch } from 'react-redux';\n\nimport AlternateEmailIcon from '@/material-icons/400-24px/alternate_email.svg?react';\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'mastodon/actions/conversations';\nimport { connectDirectStream } from 'mastodon/actions/streaming';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\n\nimport { ConversationsList } from './components/conversations_list';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Private mentions' },\n});\n\nconst DirectTimeline = ({ columnId, multiColumn }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const pinned = !!columnId;\n\n  const handlePin = useCallback(() => {\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  }, [dispatch, columnId]);\n\n  const handleMove = useCallback((dir) => {\n    dispatch(moveColumn(columnId, dir));\n  }, [dispatch, columnId]);\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current.scrollTop();\n  }, [columnRef]);\n\n  useEffect(() => {\n    dispatch(mountConversations());\n    dispatch(expandConversations());\n\n    const disconnect = dispatch(connectDirectStream());\n\n    return () => {\n      dispatch(unmountConversations());\n      disconnect();\n    };\n  }, [dispatch]);\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='at'\n        iconComponent={AlternateEmailIcon}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onMove={handleMove}\n        onClick={handleHeaderClick}\n        pinned={pinned}\n        multiColumn={multiColumn}\n      />\n\n      <ConversationsList\n        trackScroll={!pinned}\n        scrollKey={`direct_timeline-${columnId}`}\n        emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n        bindToDocument={!multiColumn}\n        prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n        alwaysPrepend\n      />\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nDirectTimeline.propTypes = {\n  columnId: PropTypes.string,\n  multiColumn: PropTypes.bool,\n};\n\nexport default DirectTimeline;\n"],"sourceRoot":""}