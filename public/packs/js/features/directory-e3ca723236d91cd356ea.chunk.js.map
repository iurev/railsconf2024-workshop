{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/directory/index.jsx"],"names":["messages","defineMessages","title","id","defaultMessage","recentlyActive","newArrivals","local","federated","Directory","PureComponent","constructor","arguments","_defineProperty","order","columnId","dispatch","this","props","removeColumn","addColumn","getParams","state","params","dir","moveColumn","column","scrollTop","c","e","changeColumnParams","target","value","setState","expandDirectory","componentDidMount","fetchDirectory","componentDidUpdate","prevProps","prevState","paramsOld","paramsNew","render","isLoading","accountIds","intl","multiColumn","domain","pinned","scrollableArea","_jsx","className","role","RadioButton","name","label","formatMessage","checked","onChange","handleChangeOrder","handleChangeLocal","LoadingIndicator","map","accountId","AccountCard","LoadMore","onClick","handleLoadMore","visible","_jsxs","Column","bindToDocument","ref","setRef","children","ColumnHeader","icon","iconComponent","PeopleIcon","onPin","handlePin","onMove","handleMove","handleHeaderClick","ScrollContainer","scrollKey","Helmet","content","connect","getIn","ImmutableList","injectIntl"],"mappings":"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","file":"js/features/directory-e3ca723236d91cd356ea.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport { addColumn, removeColumn, moveColumn, changeColumnParams } from 'mastodon/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { LoadMore } from 'mastodon/components/load_more';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { RadioButton } from 'mastodon/components/radio_button';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\n\nimport AccountCard from './components/account_card';\n\nconst messages = defineMessages({\n  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },\n  recentlyActive: { id: 'directory.recently_active', defaultMessage: 'Recently active' },\n  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },\n  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },\n  federated: { id: 'directory.federated', defaultMessage: 'From known fediverse' },\n});\n\nconst mapStateToProps = state => ({\n  accountIds: state.getIn(['user_lists', 'directory', 'items'], ImmutableList()),\n  isLoading: state.getIn(['user_lists', 'directory', 'isLoading'], true),\n  domain: state.getIn(['meta', 'domain']),\n});\n\nclass Directory extends PureComponent {\n\n  static propTypes = {\n    isLoading: PropTypes.bool,\n    accountIds: ImmutablePropTypes.list.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n    domain: PropTypes.string.isRequired,\n    params: PropTypes.shape({\n      order: PropTypes.string,\n      local: PropTypes.bool,\n    }),\n  };\n\n  state = {\n    order: null,\n    local: null,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECTORY', this.getParams(this.props, this.state)));\n    }\n  };\n\n  getParams = (props, state) => ({\n    order: state.order === null ? (props.params.order || 'active') : state.order,\n    local: state.local === null ? (props.params.local || false) : state.local,\n  });\n\n  handleMove = dir => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchDirectory(this.getParams(this.props, this.state)));\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const { dispatch } = this.props;\n    const paramsOld = this.getParams(prevProps, prevState);\n    const paramsNew = this.getParams(this.props, this.state);\n\n    if (paramsOld.order !== paramsNew.order || paramsOld.local !== paramsNew.local) {\n      dispatch(fetchDirectory(paramsNew));\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleChangeOrder = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n    } else {\n      this.setState({ order: e.target.value });\n    }\n  };\n\n  handleChangeLocal = e => {\n    const { dispatch, columnId } = this.props;\n\n    if (columnId) {\n      dispatch(changeColumnParams(columnId, ['local'], e.target.value === '1'));\n    } else {\n      this.setState({ local: e.target.value === '1' });\n    }\n  };\n\n  handleLoadMore = () => {\n    const { dispatch } = this.props;\n    dispatch(expandDirectory(this.getParams(this.props, this.state)));\n  };\n\n  render () {\n    const { isLoading, accountIds, intl, columnId, multiColumn, domain } = this.props;\n    const { order, local }  = this.getParams(this.props, this.state);\n    const pinned = !!columnId;\n\n    const scrollableArea = (\n      <div className='scrollable'>\n        <div className='filter-form'>\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='order' value='active' label={intl.formatMessage(messages.recentlyActive)} checked={order === 'active'} onChange={this.handleChangeOrder} />\n            <RadioButton name='order' value='new' label={intl.formatMessage(messages.newArrivals)} checked={order === 'new'} onChange={this.handleChangeOrder} />\n          </div>\n\n          <div className='filter-form__column' role='group'>\n            <RadioButton name='local' value='1' label={intl.formatMessage(messages.local, { domain })} checked={local} onChange={this.handleChangeLocal} />\n            <RadioButton name='local' value='0' label={intl.formatMessage(messages.federated)} checked={!local} onChange={this.handleChangeLocal} />\n          </div>\n        </div>\n\n        <div className='directory__list'>\n          {isLoading ? <LoadingIndicator /> : accountIds.map(accountId => (\n            <AccountCard id={accountId} key={accountId} />\n          ))}\n        </div>\n\n        <LoadMore onClick={this.handleLoadMore} visible={!isLoading} />\n      </div>\n    );\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='address-book-o'\n          iconComponent={PeopleIcon}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        />\n\n        {multiColumn && !pinned ? <ScrollContainer scrollKey='directory'>{scrollableArea}</ScrollContainer> : scrollableArea}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Directory));\n"],"sourceRoot":""}