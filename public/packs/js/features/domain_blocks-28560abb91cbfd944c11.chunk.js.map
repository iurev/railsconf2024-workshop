{"version":3,"sources":["webpack:///./app/javascript/material-icons/400-24px/lock_open.svg","webpack:///./app/javascript/mastodon/components/domain.tsx","webpack:///./app/javascript/mastodon/containers/domain_container.jsx","webpack:///./app/javascript/mastodon/features/domain_blocks/index.jsx"],"names":["_path","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_ref","title","titleId","props","xmlns","height","viewBox","width","id","d","messages","defineMessages","unblockDomain","defaultMessage","blockDomainConfirm","injectIntl","connect","makeMapStateToProps","mapStateToProps","mapDispatchToProps","dispatch","intl","onBlockDomain","domain","openModal","modalType","modalProps","message","_jsx","FormattedMessage","values","confirm","formatMessage","onConfirm","blockDomain","onUnblockDomain","useIntl","handleDomainUnblock","useCallback","className","IconButton","active","icon","iconComponent","LockOpenIcon","onClick","heading","Blocks","ImmutablePureComponent","constructor","_defineProperty","_debounce","expandDomainBlocks","leading","UNSAFE_componentWillMount","fetchDomainBlocks","render","domains","hasMore","multiColumn","Column","LoadingIndicator","emptyMessage","bindToDocument","BlockIcon","alwaysShowBackButton","ScrollableList","scrollKey","onLoadMore","handleLoadMore","map","DomainContainer","Helmet","name","content","params","PropTypes","object","isRequired","func","bool","ImmutablePropTypes","orderedSet","state","getIn"],"mappings":"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","file":"js/features/domain_blocks-28560abb91cbfd944c11.chunk.js","sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLockOpen(_ref) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    height: 24,\n    viewBox: \"0 -960 960 960\",\n    width: 24,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M240-640h360v-80q0-50-35-85t-85-35q-50 0-85 35t-35 85h-80q0-83 58.5-141.5T480-920q83 0 141.5 58.5T680-720v80h40q33 0 56.5 23.5T800-560v400q0 33-23.5 56.5T720-80H240q-33 0-56.5-23.5T160-160v-400q0-33 23.5-56.5T240-640Zm0 480h480v-400H240v400Zm240-120q33 0 56.5-23.5T560-360q0-33-23.5-56.5T480-440q-33 0-56.5 23.5T400-360q0 33 23.5 56.5T480-280ZM240-160v-400 400Z\"\n  })));\n}\nexport default SvgLockOpen;","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport LockOpenIcon from '@/material-icons/400-24px/lock_open.svg?react';\n\nimport { IconButton } from './icon_button';\n\nconst messages = defineMessages({\n  unblockDomain: {\n    id: 'account.unblock_domain',\n    defaultMessage: 'Unblock domain {domain}',\n  },\n});\n\ninterface Props {\n  domain: string;\n  onUnblockDomain: (domain: string) => void;\n}\n\nexport const Domain: React.FC<Props> = ({ domain, onUnblockDomain }) => {\n  const intl = useIntl();\n\n  const handleDomainUnblock = useCallback(() => {\n    onUnblockDomain(domain);\n  }, [domain, onUnblockDomain]);\n\n  return (\n    <div className='domain'>\n      <div className='domain__wrapper'>\n        <span className='domain__domain-name'>\n          <strong>{domain}</strong>\n        </span>\n\n        <div className='domain__buttons'>\n          <IconButton\n            active\n            icon='unlock'\n            iconComponent={LockOpenIcon}\n            title={intl.formatMessage(messages.unblockDomain, { domain })}\n            onClick={handleDomainUnblock}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { blockDomain, unblockDomain } from '../actions/domain_blocks';\nimport { openModal } from '../actions/modal';\nimport { Domain } from '../components/domain';\n\nconst messages = defineMessages({\n  blockDomainConfirm: { id: 'confirmations.domain_block.confirm', defaultMessage: 'Block entire domain' },\n});\n\nconst makeMapStateToProps = () => {\n  const mapStateToProps = () => ({});\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onBlockDomain (domain) {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: <FormattedMessage id='confirmations.domain_block.message' defaultMessage='Are you really, really sure you want to block the entire {domain}? In most cases a few targeted blocks or mutes are sufficient and preferable. You will not see content from that domain in any public timelines or your notifications. Your followers from that domain will be removed.' values={{ domain: <strong>{domain}</strong> }} />,\n        confirm: intl.formatMessage(messages.blockDomainConfirm),\n        onConfirm: () => dispatch(blockDomain(domain)),\n      },\n    }));\n  },\n\n  onUnblockDomain (domain) {\n    dispatch(unblockDomain(domain));\n  },\n});\n\nexport default injectIntl(connect(makeMapStateToProps, mapDispatchToProps)(Domain));\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport BlockIcon from '@/material-icons/400-24px/block-fill.svg?react';\n\nimport { fetchDomainBlocks, expandDomainBlocks } from '../../actions/domain_blocks';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport DomainContainer from '../../containers/domain_container';\nimport Column from '../ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'column.domain_blocks', defaultMessage: 'Blocked domains' },\n  unblockDomain: { id: 'account.unblock_domain', defaultMessage: 'Unblock domain {domain}' },\n});\n\nconst mapStateToProps = state => ({\n  domains: state.getIn(['domain_lists', 'blocks', 'items']),\n  hasMore: !!state.getIn(['domain_lists', 'blocks', 'next']),\n});\n\nclass Blocks extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    hasMore: PropTypes.bool,\n    domains: ImmutablePropTypes.orderedSet,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  UNSAFE_componentWillMount () {\n    this.props.dispatch(fetchDomainBlocks());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandDomainBlocks());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, domains, hasMore, multiColumn } = this.props;\n\n    if (!domains) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.domain_blocks' defaultMessage='There are no blocked domains yet.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn} icon='ban' iconComponent={BlockIcon} heading={intl.formatMessage(messages.heading)} alwaysShowBackButton>\n        <ScrollableList\n          scrollKey='domain_blocks'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {domains.map(domain =>\n            <DomainContainer key={domain} domain={domain} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Blocks));\n"],"sourceRoot":""}