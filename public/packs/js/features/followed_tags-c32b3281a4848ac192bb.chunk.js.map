{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/followed_tags/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","FollowedTags","ImmutablePureComponent","constructor","arguments","_defineProperty","_debounce","this","props","dispatch","expandFollowedHashtags","leading","componentDidMount","fetchFollowedHashtags","render","intl","hashtags","isLoading","hasMore","multiColumn","emptyMessage","_jsx","FormattedMessage","Column","bindToDocument","ColumnHeader","icon","iconComponent","TagIcon","title","formatMessage","showBackButton","ScrollableList","scrollKey","onLoadMore","handleLoadMore","map","hashtag","Hashtag","name","get","to","concat","withGraph","people","getIn","history","reverse","day","toArray","Helmet","content","params","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","connect","state","injectIntl"],"mappings":"uRAmBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,gBAAkBC,eAAe,uBASjD,MAAMC,UAAqBC,IAAuBC,cAAA,SAAAC,WAAAC,YAAA,sBAgB/BC,KAAS,KACxBC,KAAKC,MAAMC,SAASC,cAAyB,GAC5C,IAAK,CAAEC,SAAS,IAAO,CAN1BC,oBACEL,KAAKC,MAAMC,SAASI,cACtB,CAMAC,SACE,MAAM,KAAEC,EAAI,SAAEC,EAAQ,UAAEC,EAAS,QAAEC,EAAO,YAAEC,GAAgBZ,KAAKC,MAE3DY,EAAeC,YAACC,IAAgB,CAACvB,GAAE,6BAA8BC,eAAe,iFAEtF,OACEqB,YAACE,IAAM,CAACC,gBAAiBL,QAAY,EACnCE,YAACI,IAAY,CACXC,KAAK,UACLC,cAAeC,IACfC,MAAOd,EAAKe,cAAclC,EAASE,SACnCiC,gBAAc,EACdZ,YAAaA,IAGfE,YAACW,IAAc,CACbC,UAAU,gBACVb,aAAcA,EACdF,QAASA,EACTD,UAAWA,EACXiB,WAAY3B,KAAK4B,eACjBX,gBAAiBL,QAAY,EAE5BH,EAASoB,KAAKC,GACbhB,YAACiB,IAAO,CAENC,KAAMF,EAAQG,IAAI,QAClBC,GAAE,SAAAC,OAAWL,EAAQG,IAAI,SACzBG,WAAW,EAEXC,OAAoD,EAA5CP,EAAQQ,MAAM,CAAC,UAAW,EAAG,aAA+D,EAA5CR,EAAQQ,MAAM,CAAC,UAAW,EAAG,aACrFC,QAAST,EAAQG,IAAI,WAAWO,UAAUX,KAAKY,GAAQA,EAAIR,IAAI,UAASS,WANnEZ,EAAQG,IAAI,YAWvBnB,YAAC6B,IAAM,UACL7B,YAAA,QAAMkB,KAAK,SAASY,QAAQ,aAIpC,EAED9C,YA/DKJ,EAAY,YAEG,CACjBmD,OAAQC,IAAUC,OAAOC,WACzB9C,SAAU4C,IAAUG,KAAKD,WACzBxC,KAAMsC,IAAUC,OAAOC,WACvBvC,SAAUyC,IAAmBC,KAC7BzC,UAAWoC,IAAUM,KACrBzC,QAASmC,IAAUM,KACnBxC,YAAakC,IAAUM,OAwDZC,6BAvESC,IAAK,CAC3B7C,SAAU6C,EAAMhB,MAAM,CAAC,gBAAiB,UACxC5B,UAAW4C,EAAMhB,MAAM,CAAC,gBAAiB,cAAc,GACvD3B,UAAW2C,EAAMhB,MAAM,CAAC,gBAAiB,YAoE5Be,CAAyBE,YAAW7D,G","file":"js/features/followed_tags-c32b3281a4848ac192bb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport TagIcon from '@/material-icons/400-24px/tag.svg?react';\nimport { expandFollowedHashtags, fetchFollowedHashtags } from 'mastodon/actions/tags';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { Hashtag } from 'mastodon/components/hashtag';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport Column from 'mastodon/features/ui/components/column';\n\nconst messages = defineMessages({\n  heading: { id: 'followed_tags', defaultMessage: 'Followed hashtags' },\n});\n\nconst mapStateToProps = state => ({\n  hashtags: state.getIn(['followed_tags', 'items']),\n  isLoading: state.getIn(['followed_tags', 'isLoading'], true),\n  hasMore: !!state.getIn(['followed_tags', 'next']),\n});\n\nclass FollowedTags extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    hashtags: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(fetchFollowedHashtags());\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowedHashtags());\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, hashtags, isLoading, hasMore, multiColumn } = this.props;\n\n    const emptyMessage = <FormattedMessage id='empty_column.followed_tags' defaultMessage='You have not followed any hashtags yet. When you do, they will show up here.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn}>\n        <ColumnHeader\n          icon='hashtag'\n          iconComponent={TagIcon}\n          title={intl.formatMessage(messages.heading)}\n          showBackButton\n          multiColumn={multiColumn}\n        />\n\n        <ScrollableList\n          scrollKey='followed_tags'\n          emptyMessage={emptyMessage}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          bindToDocument={!multiColumn}\n        >\n          {hashtags.map((hashtag) => (\n            <Hashtag\n              key={hashtag.get('name')}\n              name={hashtag.get('name')}\n              to={`/tags/${hashtag.get('name')}`}\n              withGraph={false}\n              // Taken from ImmutableHashtag. Should maybe refactor ImmutableHashtag to accept more options?\n              people={hashtag.getIn(['history', 0, 'accounts']) * 1 + hashtag.getIn(['history', 1, 'accounts']) * 1}\n              history={hashtag.get('history').reverse().map((day) => day.get('uses')).toArray()}\n            />\n          ))}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(FollowedTags));\n"],"sourceRoot":""}