{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/following/index.jsx"],"names":["RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","Following","ImmutablePureComponent","constructor","arguments","_defineProperty","_debounce","this","props","dispatch","expandFollowing","accountId","leading","_load","isAccount","fetchAccount","fetchFollowing","componentDidMount","params","acct","lookupAccount","componentDidUpdate","prevProps","render","accountIds","hasMore","blockedBy","multiColumn","isLoading","suspended","hidden","remote","remoteUrl","hideCollections","BundleColumnError","errorType","Column","LoadingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","isEmpty","remoteMessage","ColumnBackButton","ScrollableList","scrollKey","onLoadMore","handleLoadMore","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","bindToDocument","map","AccountContainer","withNote","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","getAccountHidden"],"mappings":"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","file":"js/features/following-d0184c5473d7d403ed57.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { TimelineHint } from 'mastodon/components/timeline_hint';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\nimport { getAccountHidden } from 'mastodon/selectors';\n\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowing,\n  expandFollowing,\n} from '../../actions/accounts';\nimport { ColumnBackButton } from '../../components/column_back_button';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport AccountContainer from '../../containers/account_container';\nimport { LimitedAccountHint } from '../account_timeline/components/limited_account_hint';\nimport HeaderContainer from '../account_timeline/containers/header_container';\nimport Column from '../ui/components/column';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'following', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'following', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'following', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hideCollections: state.getIn(['accounts', accountId, 'hide_collections'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.follows' defaultMessage='Follows' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass Following extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowing(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowing(this.props.accountId));\n  }, 300, { leading: true });\n\n  render () {\n    const { accountId, accountIds, hasMore, blockedBy, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl, hideCollections } = this.props;\n\n    if (!isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = blockedBy || suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (hideCollections && accountIds.isEmpty()) {\n      emptyMessage = <FormattedMessage id='empty_column.account_hides_collections' defaultMessage='This user has chosen to not make this information available' />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.follows.empty' defaultMessage=\"This user doesn't follow anyone yet.\" />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <ScrollableList\n          scrollKey='following'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {forceEmptyState ? [] : accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Following);\n"],"sourceRoot":""}