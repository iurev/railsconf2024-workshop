{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/list_timeline/index.jsx"],"names":["messages","defineMessages","deleteMessage","id","defaultMessage","deleteConfirm","followed","none","list","ListTimeline","PureComponent","constructor","arguments","_defineProperty","columnId","dispatch","this","props","removeColumn","addColumn","params","history","push","dir","moveColumn","column","scrollTop","c","maxId","expandListTimeline","openModal","modalType","modalProps","listId","intl","message","formatMessage","confirm","onConfirm","deleteList","_ref","target","updateList","undefined","value","_ref2","checked","componentDidMount","fetchList","disconnect","connectListStream","UNSAFE_componentWillReceiveProps","nextProps","componentWillUnmount","render","hasUnread","multiColumn","pinned","title","get","replies_policy","isExclusive","_jsx","Column","className","LoadingIndicator","BundleColumnError","errorType","_jsxs","bindToDocument","ref","setRef","label","children","ColumnHeader","icon","iconComponent","ListAltIcon","active","onPin","handlePin","onMove","handleMove","onClick","handleHeaderClick","type","tabIndex","handleEditClick","Icon","EditIcon","FormattedMessage","handleDeleteClick","DeleteIcon","Toggle","concat","onChange","onExclusiveToggle","htmlFor","map","policy","RadioButton","name","handleRepliesPolicyChange","StatusListContainer","trackScroll","scrollKey","timelineId","onLoadMore","handleLoadMore","emptyMessage","Helmet","content","withRouter","connect","mapStateToProps","state","getIn","injectIntl"],"mappings":"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","file":"js/features/list_timeline-1ff435345e4782923cc6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { withRouter } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport Toggle from 'react-toggle';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport EditIcon from '@/material-icons/400-24px/edit.svg?react';\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { fetchList, deleteList, updateList } from 'mastodon/actions/lists';\nimport { openModal } from 'mastodon/actions/modal';\nimport { connectListStream } from 'mastodon/actions/streaming';\nimport { expandListTimeline } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { Icon }  from 'mastodon/components/icon';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { RadioButton } from 'mastodon/components/radio_button';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport StatusListContainer from 'mastodon/features/ui/containers/status_list_container';\nimport { WithRouterPropTypes } from 'mastodon/utils/react_router';\n\nconst messages = defineMessages({\n  deleteMessage: { id: 'confirmations.delete_list.message', defaultMessage: 'Are you sure you want to permanently delete this list?' },\n  deleteConfirm: { id: 'confirmations.delete_list.confirm', defaultMessage: 'Delete' },\n  followed:   { id: 'lists.replies_policy.followed', defaultMessage: 'Any followed user' },\n  none:    { id: 'lists.replies_policy.none', defaultMessage: 'No one' },\n  list:  { id: 'lists.replies_policy.list', defaultMessage: 'Members of the list' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  list: state.getIn(['lists', props.params.id]),\n  hasUnread: state.getIn(['timelines', `list:${props.params.id}`, 'unread']) > 0,\n});\n\nclass ListTimeline extends PureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    list: PropTypes.oneOfType([ImmutablePropTypes.map, PropTypes.bool]),\n    intl: PropTypes.object.isRequired,\n    ...WithRouterPropTypes,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('LIST', { id: this.props.params.id }));\n      this.props.history.push('/');\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(fetchList(id));\n    dispatch(expandListTimeline(id));\n\n    this.disconnect = dispatch(connectListStream(id));\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n    const { id } = nextProps.params;\n\n    if (id !== this.props.params.id) {\n      if (this.disconnect) {\n        this.disconnect();\n        this.disconnect = null;\n      }\n\n      dispatch(fetchList(id));\n      dispatch(expandListTimeline(id));\n\n      this.disconnect = dispatch(connectListStream(id));\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { id } = this.props.params;\n    this.props.dispatch(expandListTimeline(id, { maxId }));\n  };\n\n  handleEditClick = () => {\n    this.props.dispatch(openModal({\n      modalType: 'LIST_EDITOR',\n      modalProps: { listId: this.props.params.id },\n    }));\n  };\n\n  handleDeleteClick = () => {\n    const { dispatch, columnId, intl } = this.props;\n    const { id } = this.props.params;\n\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.deleteMessage),\n        confirm: intl.formatMessage(messages.deleteConfirm),\n        onConfirm: () => {\n          dispatch(deleteList(id));\n\n          if (columnId) {\n            dispatch(removeColumn(columnId));\n          } else {\n            this.props.history.push('/lists');\n          }\n        },\n      },\n    }));\n  };\n\n  handleRepliesPolicyChange = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, undefined, target.value));\n  };\n\n  onExclusiveToggle = ({ target }) => {\n    const { dispatch } = this.props;\n    const { id } = this.props.params;\n    dispatch(updateList(id, undefined, false, target.checked, undefined));\n  };\n\n  render () {\n    const { hasUnread, columnId, multiColumn, list, intl } = this.props;\n    const { id } = this.props.params;\n    const pinned = !!columnId;\n    const title  = list ? list.get('title') : id;\n    const replies_policy = list ? list.get('replies_policy') : undefined;\n    const isExclusive = list ? list.get('exclusive') : undefined;\n\n    if (typeof list === 'undefined') {\n      return (\n        <Column>\n          <div className='scrollable'>\n            <LoadingIndicator />\n          </div>\n        </Column>\n      );\n    } else if (list === false) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={title}>\n        <ColumnHeader\n          icon='list-ul'\n          iconComponent={ListAltIcon}\n          active={hasUnread}\n          title={title}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <div className='column-settings'>\n            <section className='column-header__links'>\n              <button type='button' className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.handleEditClick}>\n                <Icon id='pencil' icon={EditIcon} /> <FormattedMessage id='lists.edit' defaultMessage='Edit list' />\n              </button>\n\n              <button type='button' className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.handleDeleteClick}>\n                <Icon id='trash' icon={DeleteIcon} /> <FormattedMessage id='lists.delete' defaultMessage='Delete list' />\n              </button>\n            </section>\n\n            <section>\n              <div className='setting-toggle'>\n                <Toggle id={`list-${id}-exclusive`} checked={isExclusive} onChange={this.onExclusiveToggle} />\n                <label htmlFor={`list-${id}-exclusive`} className='setting-toggle__label'>\n                  <FormattedMessage id='lists.exclusive' defaultMessage='Hide these posts from home' />\n                </label>\n              </div>\n            </section>\n\n            {replies_policy !== undefined && (\n              <section aria-labelledby={`list-${id}-replies-policy`}>\n                <h3 id={`list-${id}-replies-policy`}><FormattedMessage id='lists.replies_policy.title' defaultMessage='Show replies to:' /></h3>\n\n                <div className='column-settings__row'>\n                  { ['none', 'list', 'followed'].map(policy => (\n                    <RadioButton name='order' key={policy} value={policy} label={intl.formatMessage(messages[policy])} checked={replies_policy === policy} onChange={this.handleRepliesPolicyChange} />\n                  ))}\n                </div>\n              </section>\n            )}\n          </div>\n        </ColumnHeader>\n\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`list_timeline-${columnId}`}\n          timelineId={`list:${id}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.list' defaultMessage='There is nothing in this list yet. When members of this list post new statuses, they will appear here.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{title}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default withRouter(connect(mapStateToProps)(injectIntl(ListTimeline)));\n"],"sourceRoot":""}