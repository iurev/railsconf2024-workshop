{"version":3,"sources":["webpack:///./app/javascript/mastodon/features/report/category.jsx","webpack:///./app/javascript/mastodon/features/report/comment.jsx","webpack:///./app/javascript/mastodon/features/report/rules.jsx","webpack:///./app/javascript/mastodon/features/report/components/status_check_box.jsx","webpack:///./app/javascript/mastodon/features/report/containers/status_check_box_container.js","webpack:///./app/javascript/mastodon/features/report/statuses.jsx","webpack:///./app/javascript/mastodon/features/report/thanks.jsx","webpack:///./app/javascript/mastodon/features/ui/components/report_modal.jsx"],"names":["messages","defineMessages","dislike","id","defaultMessage","dislike_description","spam","spam_description","legal","legal_description","violation","violation_description","other","other_description","status","account","Category","PureComponent","constructor","arguments","_defineProperty","onNextStep","category","this","props","value","checked","onChangeCategory","render","startedFrom","rules","intl","options","size","_jsxs","_Fragment","children","_jsx","className","FormattedMessage","values","type","formatMessage","map","item","Option","name","onToggle","handleCategoryToggle","label","description","concat","Button","onClick","handleNextClick","disabled","connect","state","getIn","ImmutableList","injectIntl","placeholder","selectRepliedToAccountIds","createSelector","get","_","statusIds","statusesMap","statusId","resultEqualityCheck","shallowEqual","Comment","_ref","comment","domain","isRemote","isSubmitting","selectedDomains","onSubmit","onChangeComment","onToggleDomain","useIntl","dispatch","useAppDispatch","loadedRef","useRef","handleClick","useCallback","handleChange","e","target","handleToggleDomain","handleKeyDown","keyCode","ctrlKey","metaKey","accountIds","useAppSelector","accountsMap","availableDomains","OrderedSet","union","accountId","split","filter","useEffect","current","forEach","has","fetchAccount","onChange","onKeyDown","Toggle","includes","Rules","selectedRuleIds","handleRulesToggle","multiple","StatusCheckBox","labelComponent","Avatar","DisplayName","VisibilityIcon","visibility","RelativeTimestamp","timestamp","StatusContent","MediaAttachments","visible","handleStatusesToggle","makeMapStateToProps","getStatus","makeGetStatus","mapStateToProps","Statuses","availableStatusIds","selectedStatusIds","isLoading","LoadingIndicator","Thanks","onClose","unfollowAccount","muteAccount","blockAccount","submitted","secondary","handleUnfollowClick","handleMuteClick","handleBlockClick","handleCloseClick","close","ReportModal","ImmutablePureComponent","step","isSubmitted","setState","submitReport","account_id","status_ids","toArray","forward_to_domains","forward","rule_ids","handleSuccess","handleFail","add","remove","ruleId","componentDidMount","expandAccountTimeline","withReplies","fetchServer","stepComponent","handleNextStep","handleChangeCategory","handleRuleToggle","handleStatusToggle","handleSubmit","handleChangeComment","handleDomainToggle","IconButton","title","icon","iconComponent","CloseIcon","PropTypes","string","isRequired","func","object","ImmutablePropTypes","record","getAccount","makeGetAccount"],"mappings":"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","file":"js/modals/report_modal-437bf9d44b9120950e70.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst messages = defineMessages({\n  dislike: { id: 'report.reasons.dislike', defaultMessage: 'I don\\'t like it' },\n  dislike_description: { id: 'report.reasons.dislike_description', defaultMessage: 'It is not something you want to see' },\n  spam: { id: 'report.reasons.spam', defaultMessage: 'It\\'s spam' },\n  spam_description: { id: 'report.reasons.spam_description', defaultMessage: 'Malicious links, fake engagement, or repetitive replies' },\n  legal: { id: 'report.reasons.legal', defaultMessage: 'It\\'s illegal' },\n  legal_description: { id: 'report.reasons.legal_description', defaultMessage: 'You believe it violates the law of your or the server\\'s country' },\n  violation: { id: 'report.reasons.violation', defaultMessage: 'It violates server rules' },\n  violation_description: { id: 'report.reasons.violation_description', defaultMessage: 'You are aware that it breaks specific rules' },\n  other: { id: 'report.reasons.other', defaultMessage: 'It\\'s something else' },\n  other_description: { id: 'report.reasons.other_description', defaultMessage: 'The issue does not fit into other categories' },\n  status: { id: 'report.category.title_status', defaultMessage: 'post' },\n  account: { id: 'report.category.title_account', defaultMessage: 'profile' },\n});\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules'], ImmutableList()),\n});\n\nclass Category extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    category: PropTypes.string,\n    onChangeCategory: PropTypes.func.isRequired,\n    startedFrom: PropTypes.oneOf(['status', 'account']),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep, category } = this.props;\n\n    switch(category) {\n    case 'dislike':\n      onNextStep('thanks');\n      break;\n    case 'violation':\n      onNextStep('rules');\n      break;\n    default:\n      onNextStep('statuses');\n      break;\n    }\n  };\n\n  handleCategoryToggle = (value, checked) => {\n    const { onChangeCategory } = this.props;\n\n    if (checked) {\n      onChangeCategory(value);\n    }\n  };\n\n  render () {\n    const { category, startedFrom, rules, intl } = this.props;\n\n    const options = rules.size > 0 ? [\n      'dislike',\n      'spam',\n      'legal',\n      'violation',\n      'other',\n    ] : [\n      'dislike',\n      'spam',\n      'legal',\n      'other',\n    ];\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.category.title' defaultMessage=\"Tell us what's going on with this {type}\" values={{ type: intl.formatMessage(messages[startedFrom]) }} /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.category.subtitle' defaultMessage='Choose the best match' /></p>\n\n        <div>\n          {options.map(item => (\n            <Option\n              key={item}\n              name='category'\n              value={item}\n              checked={category === item}\n              onToggle={this.handleCategoryToggle}\n              label={intl.formatMessage(messages[item])}\n              description={intl.formatMessage(messages[`${item}_description`])}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={category === null}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Category));\n","import PropTypes from 'prop-types';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { OrderedSet, List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { shallowEqual } from 'react-redux';\n\nimport Toggle from 'react-toggle';\n\nimport { fetchAccount } from 'mastodon/actions/accounts';\nimport { Button } from 'mastodon/components/button';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Type or paste additional comments' },\n});\n\nconst selectRepliedToAccountIds = createSelector(\n  [\n    (state) => state.get('statuses'),\n    (_, statusIds) => statusIds,\n  ],\n  (statusesMap, statusIds) => statusIds.map((statusId) => statusesMap.getIn([statusId, 'in_reply_to_account_id'])),\n  {\n    resultEqualityCheck: shallowEqual,\n  }\n);\n\nconst Comment = ({ comment, domain, statusIds, isRemote, isSubmitting, selectedDomains, onSubmit, onChangeComment, onToggleDomain }) => {\n  const intl = useIntl();\n\n  const dispatch = useAppDispatch();\n  const loadedRef = useRef(false);\n\n  const handleClick = useCallback(() => onSubmit(), [onSubmit]);\n  const handleChange = useCallback((e) => onChangeComment(e.target.value), [onChangeComment]);\n  const handleToggleDomain = useCallback(e => onToggleDomain(e.target.value, e.target.checked), [onToggleDomain]);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      handleClick();\n    }\n  }, [handleClick]);\n\n  // Memoize accountIds since we don't want it to trigger `useEffect` on each render\n  const accountIds = useAppSelector((state) => domain ? selectRepliedToAccountIds(state, statusIds) : ImmutableList());\n\n  // While we could memoize `availableDomains`, it is pretty inexpensive to recompute\n  const accountsMap = useAppSelector((state) => state.get('accounts'));\n  const availableDomains = domain ? OrderedSet([domain]).union(accountIds.map((accountId) => accountsMap.getIn([accountId, 'acct'], '').split('@')[1]).filter(domain => !!domain)) : OrderedSet();\n\n  useEffect(() => {\n    if (loadedRef.current) {\n      return;\n    }\n\n    loadedRef.current = true;\n\n    // First, pre-select known domains\n    availableDomains.forEach((domain) => {\n      onToggleDomain(domain, true);\n    });\n\n    // Then, fetch missing replied-to accounts\n    const unknownAccounts = OrderedSet(accountIds.filter(accountId => accountId && !accountsMap.has(accountId)));\n    unknownAccounts.forEach((accountId) => {\n      dispatch(fetchAccount(accountId));\n    });\n  });\n\n  return (\n    <>\n      <h3 className='report-dialog-modal__title'><FormattedMessage id='report.comment.title' defaultMessage='Is there anything else you think we should know?' /></h3>\n\n      <textarea\n        className='report-dialog-modal__textarea'\n        placeholder={intl.formatMessage(messages.placeholder)}\n        value={comment}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isSubmitting}\n      />\n\n      {isRemote && (\n        <>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n          { availableDomains.map((domain) => (\n            <label className='report-dialog-modal__toggle' key={`toggle-${domain}`}>\n              <Toggle checked={selectedDomains.includes(domain)} disabled={isSubmitting} onChange={handleToggleDomain} value={domain} />\n              <FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} />\n            </label>\n          ))}\n        </>\n      )}\n\n      <div className='flex-spacer' />\n\n      <div className='report-dialog-modal__actions'>\n        <Button onClick={handleClick} disabled={isSubmitting}><FormattedMessage id='report.submit' defaultMessage='Submit report' /></Button>\n      </div>\n    </>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  domain: PropTypes.string,\n  statusIds: ImmutablePropTypes.list.isRequired,\n  isRemote: PropTypes.bool,\n  isSubmitting: PropTypes.bool,\n  selectedDomains: ImmutablePropTypes.set.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChangeComment: PropTypes.func.isRequired,\n  onToggleDomain: PropTypes.func.isRequired,\n};\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules']),\n});\n\nclass Rules extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    selectedRuleIds: ImmutablePropTypes.set.isRequired,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('statuses');\n  };\n\n  handleRulesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { rules, selectedRuleIds } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.rules.title' defaultMessage='Which rules are being violated?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.rules.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div>\n          {rules.map(item => (\n            <Option\n              key={item.get('id')}\n              name='rule_ids'\n              value={item.get('id')}\n              checked={selectedRuleIds.includes(item.get('id'))}\n              onToggle={this.handleRulesToggle}\n              label={item.get('text')}\n              multiple\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={selectedRuleIds.size < 1}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Rules);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { Avatar } from 'mastodon/components/avatar';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport MediaAttachments from 'mastodon/components/media_attachments';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport StatusContent from 'mastodon/components/status_content';\nimport { VisibilityIcon } from 'mastodon/components/visibility_icon';\n\nimport Option from './option';\n\nclass StatusCheckBox extends PureComponent {\n\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleStatusesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { status, checked } = this.props;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    const labelComponent = (\n      <div className='status-check-box__status poll__option__text'>\n        <div className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <Avatar account={status.get('account')} size={46} />\n          </div>\n\n          <div>\n            <DisplayName account={status.get('account')} /> · <span className='status__visibility-icon'><VisibilityIcon visibility={status.get('visibility')} /></span> <RelativeTimestamp timestamp={status.get('created_at')} />\n          </div>\n        </div>\n\n        <StatusContent status={status} />\n        <MediaAttachments status={status} visible={false} />\n      </div>\n    );\n\n    return (\n      <Option\n        name='status_ids'\n        value={status.get('id')}\n        checked={checked}\n        onToggle={this.handleStatusesToggle}\n        label={status.get('search_index')}\n        labelComponent={labelComponent}\n        multiple\n      />\n    );\n  }\n\n}\n\nexport default StatusCheckBox;\n","import { connect } from 'react-redux';\n\nimport { makeGetStatus } from 'mastodon/selectors';\n\nimport StatusCheckBox from '../components/status_check_box';\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, { id }) => ({\n    status: getStatus(state, { id }),\n  });\n\n  return mapStateToProps;\n};\n\nexport default connect(makeMapStateToProps)(StatusCheckBox);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport StatusCheckBox from 'mastodon/features/report/containers/status_check_box_container';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  availableStatusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])),\n  isLoading: state.getIn(['timelines', `account:${accountId}:with_replies`, 'isLoading']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    accountId: PropTypes.string.isRequired,\n    availableStatusIds: ImmutablePropTypes.set.isRequired,\n    selectedStatusIds: ImmutablePropTypes.set.isRequired,\n    isLoading: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('comment');\n  };\n\n  render () {\n    const { availableStatusIds, selectedStatusIds, onToggle, isLoading } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.statuses.title' defaultMessage='Are there any posts that back up this report?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.statuses.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div className='report-dialog-modal__statuses'>\n          {isLoading ? <LoadingIndicator /> : availableStatusIds.union(selectedStatusIds).map(statusId => (\n            <StatusCheckBox\n              id={statusId}\n              key={statusId}\n              checked={selectedStatusIds.includes(statusId)}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Statuses);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport {\n  unfollowAccount,\n  muteAccount,\n  blockAccount,\n} from 'mastodon/actions/accounts';\nimport { Button } from 'mastodon/components/button';\n\nconst mapStateToProps = () => ({});\n\nclass Thanks extends PureComponent {\n\n  static propTypes = {\n    submitted: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.record.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleCloseClick = () => {\n    const { onClose } = this.props;\n    onClose();\n  };\n\n  handleUnfollowClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(unfollowAccount(account.get('id')));\n    onClose();\n  };\n\n  handleMuteClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(muteAccount(account.get('id')));\n    onClose();\n  };\n\n  handleBlockClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(blockAccount(account.get('id')));\n    onClose();\n  };\n\n  render () {\n    const { account, submitted } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'>{submitted ? <FormattedMessage id='report.thanks.title_actionable' defaultMessage=\"Thanks for reporting, we'll look into this.\" /> : <FormattedMessage id='report.thanks.title' defaultMessage=\"Don't want to see this?\" />}</h3>\n        <p className='report-dialog-modal__lead'>{submitted ? <FormattedMessage id='report.thanks.take_action_actionable' defaultMessage='While we review this, you can take action against @{name}:' values={{ name: account.get('username') }} /> : <FormattedMessage id='report.thanks.take_action' defaultMessage='Here are your options for controlling what you see on Mastodon:' />}</p>\n\n        {account.getIn(['relationship', 'following']) && (\n          <>\n            <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='report.unfollow' defaultMessage='Unfollow @{name}' values={{ name: account.get('username') }} /></h4>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.unfollow_explanation' defaultMessage='You are following this account. To not see their posts in your home feed anymore, unfollow them.' /></p>\n            <Button secondary onClick={this.handleUnfollowClick}><FormattedMessage id='account.unfollow' defaultMessage='Unfollow' /></Button>\n            <hr />\n          </>\n        )}\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.mute' defaultMessage='Mute @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.mute_explanation' defaultMessage='You will not see their posts. They can still follow you and see your posts and will not know that they are muted.' /></p>\n        <Button secondary onClick={this.handleMuteClick}>{!account.getIn(['relationship', 'muting']) ? <FormattedMessage id='report.mute' defaultMessage='Mute' /> : <FormattedMessage id='account.muted' defaultMessage='Muted' />}</Button>\n\n        <hr />\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.block' defaultMessage='Block @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.block_explanation' defaultMessage='You will not see their posts. They will not be able to see your posts or follow you. They will be able to tell that they are blocked.' /></p>\n        <Button secondary onClick={this.handleBlockClick}>{!account.getIn(['relationship', 'blocking']) ? <FormattedMessage id='report.block' defaultMessage='Block' /> : <FormattedMessage id='account.blocked' defaultMessage='Blocked' />}</Button>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleCloseClick}><FormattedMessage id='report.close' defaultMessage='Done' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Thanks);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { submitReport } from 'mastodon/actions/reports';\nimport { fetchServer } from 'mastodon/actions/server';\nimport { expandAccountTimeline } from 'mastodon/actions/timelines';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport Category from 'mastodon/features/report/category';\nimport Comment from 'mastodon/features/report/comment';\nimport Rules from 'mastodon/features/report/rules';\nimport Statuses from 'mastodon/features/report/statuses';\nimport Thanks from 'mastodon/features/report/thanks';\nimport { makeGetAccount } from 'mastodon/selectors';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    statusId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.record.isRequired,\n  };\n\n  state = {\n    step: 'category',\n    selectedStatusIds: OrderedSet(this.props.statusId ? [this.props.statusId] : []),\n    selectedDomains: OrderedSet(),\n    comment: '',\n    category: null,\n    selectedRuleIds: OrderedSet(),\n    isSubmitting: false,\n    isSubmitted: false,\n  };\n\n  handleSubmit = () => {\n    const { dispatch, accountId } = this.props;\n    const { selectedStatusIds, selectedDomains, comment, category, selectedRuleIds } = this.state;\n\n    this.setState({ isSubmitting: true });\n\n    dispatch(submitReport({\n      account_id: accountId,\n      status_ids: selectedStatusIds.toArray(),\n      forward_to_domains: selectedDomains.toArray(),\n      comment,\n      forward: selectedDomains.size > 0,\n      category,\n      rule_ids: selectedRuleIds.toArray(),\n    }, this.handleSuccess, this.handleFail));\n  };\n\n  handleSuccess = () => {\n    this.setState({ isSubmitting: false, isSubmitted: true, step: 'thanks' });\n  };\n\n  handleFail = () => {\n    this.setState({ isSubmitting: false });\n  };\n\n  handleStatusToggle = (statusId, checked) => {\n    const { selectedStatusIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedStatusIds: selectedStatusIds.add(statusId) });\n    } else {\n      this.setState({ selectedStatusIds: selectedStatusIds.remove(statusId) });\n    }\n  };\n\n  handleDomainToggle = (domain, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.add(domain) }));\n    } else {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.remove(domain) }));\n    }\n  };\n\n  handleRuleToggle = (ruleId, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.add(ruleId) }));\n    } else {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.remove(ruleId) }));\n    }\n  };\n\n  handleChangeCategory = category => {\n    this.setState({ category });\n  };\n\n  handleChangeComment = comment => {\n    this.setState({ comment });\n  };\n\n  handleNextStep = step => {\n    this.setState({ step });\n  };\n\n  componentDidMount () {\n    const { dispatch, accountId } = this.props;\n\n    dispatch(expandAccountTimeline(accountId, { withReplies: true }));\n    dispatch(fetchServer());\n  }\n\n  render () {\n    const {\n      accountId,\n      account,\n      intl,\n      onClose,\n    } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const {\n      step,\n      selectedStatusIds,\n      selectedRuleIds,\n      selectedDomains,\n      comment,\n      category,\n      isSubmitting,\n      isSubmitted,\n    } = this.state;\n\n    const domain   = account.get('acct').split('@')[1];\n    const isRemote = !!domain;\n\n    let stepComponent;\n\n    switch(step) {\n    case 'category':\n      stepComponent = (\n        <Category\n          onNextStep={this.handleNextStep}\n          startedFrom={this.props.statusId ? 'status' : 'account'}\n          category={category}\n          onChangeCategory={this.handleChangeCategory}\n        />\n      );\n      break;\n    case 'rules':\n      stepComponent = (\n        <Rules\n          onNextStep={this.handleNextStep}\n          selectedRuleIds={selectedRuleIds}\n          onToggle={this.handleRuleToggle}\n        />\n      );\n      break;\n    case 'statuses':\n      stepComponent = (\n        <Statuses\n          onNextStep={this.handleNextStep}\n          accountId={accountId}\n          selectedStatusIds={selectedStatusIds}\n          onToggle={this.handleStatusToggle}\n        />\n      );\n      break;\n    case 'comment':\n      stepComponent = (\n        <Comment\n          onSubmit={this.handleSubmit}\n          isSubmitting={isSubmitting}\n          isRemote={isRemote}\n          comment={comment}\n          domain={domain}\n          onChangeComment={this.handleChangeComment}\n          statusIds={selectedStatusIds}\n          selectedDomains={selectedDomains}\n          onToggleDomain={this.handleDomainToggle}\n        />\n      );\n      break;\n    case 'thanks':\n      stepComponent = (\n        <Thanks\n          submitted={isSubmitted}\n          account={account}\n          onClose={onClose}\n        />\n      );\n    }\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' iconComponent={CloseIcon} onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          {stepComponent}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps)(injectIntl(ReportModal));\n"],"sourceRoot":""}